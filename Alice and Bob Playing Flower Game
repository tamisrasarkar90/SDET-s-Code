/*
Problem Statement:
Alice and Bob are playing a turn-based game on a field, with two lanes of flowers between them. There are x flowers in the first lane between Alice and Bob, and y flowers in the second lane between them.
The game proceeds as follows:

Alice takes the first turn.
In each turn, a player must choose either one of the lane and pick one flower from that side.
At the end of the turn, if there are no flowers left at all, the current player captures their opponent and wins the game.
Given two integers, n and m, the task is to compute the number of possible pairs (x, y) that satisfy the conditions:
Alice must win the game according to the described rules.
The number of flowers x in the first lane must be in the range [1,n].
The number of flowers y in the second lane must be in the range [1,m].
Return the number of possible pairs (x, y) that satisfy the conditions mentioned in the statement.

Example 1:
Input: n = 3, m = 2
Output: 3
Explanation: The following pairs satisfy conditions described in the statement: (1,2), (3,2), (2,1).

Example 2:
Input: n = 1, m = 1
Output: 0
Explanation: No pairs satisfy the conditions described in the statement.

Constraints:
1 <= n, m <= 105
*/
class Solution {
    public long flowerGame(int n, int m) 
    {
        //Approach 2: TC:O(1) //SC:O(1)
        /* so we have to put flowers on two lanes, in one lanes it would be from [1,n] and in another it would be from [1,m] , now to make alice win we need odd numbers of flowers, this could be possible if pairs(x,y) from [n,m],as such, either x => odd and y=> even or x=> even and y=> odd
        now, to get even count from [1,n]=>Math.floor(n/2) and odd count=>Math.ceil(n/2)
        Similarly, for [1,m]=> to get even count=>Math.floor(m/2) and odd count is Math.ceil(m/2)
    Now Math.ceil(m/2) can be written as (m+1)/2 Similarly Math.ceil(n/2) can be written as (n+1)/2.
    Hence total possibility to alice won is=>(m+1)/2*(n/2)+(n+1/2)*(m/2)
        */
         return 1L*((n+1)/2)*(m/2)+1L*((m+1)/2)*(n/2);
    }
}

        /*
      //  Approach 1: Brute Force :TC:O(N^2) //Alice will win if the pairs sum is odd,as she is atrting from 1: TLE
        int aliceWin=0;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if((i+j)%2==1)
                {
                    aliceWin++;
                }
            }
        }
        return (long)aliceWin;
    }
}*/
