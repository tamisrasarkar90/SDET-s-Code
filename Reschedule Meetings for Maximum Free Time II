/*
Problem Statement:
You are given an integer eventTime denoting the duration of an event. You are also given two integer arrays startTime and endTime, each of length n.
These represent the start and end times of n non-overlapping meetings that occur during the event between time t = 0 and time t = eventTime, where the ith meeting occurs during the time [startTime[i], endTime[i]].
You can reschedule at most one meeting by moving its start time while maintaining the same duration, such that the meetings remain non-overlapping, to maximize the longest continuous period of free time during the event.
Return the maximum amount of free time possible after rearranging the meetings.Note that the meetings can not be rescheduled to a time outside the event and they should remain non-overlapping.
Note: In this version, it is valid for the relative ordering of the meetings to change after rescheduling one meeting.

Example 1:
Input: eventTime = 5, startTime = [1,3], endTime = [2,5]
Output: 2
Explanation:
Reschedule the meeting at [1, 2] to [2, 3], leaving no meetings during the time [0, 2].

Example 2:
Input: eventTime = 10, startTime = [0,7,9], endTime = [1,8,10]
Output: 7
Explanation:
Reschedule the meeting at [0, 1] to [8, 9], leaving no meetings during the time [0, 7].

Example 3:
Input: eventTime = 10, startTime = [0,3,7,9], endTime = [1,4,8,10]
Output: 6
Explanation:
Reschedule the meeting at [3, 4] to [8, 9], leaving no meetings during the time [1, 7].

Example 4:
Input: eventTime = 5, startTime = [0,1,2,3,4], endTime = [1,2,3,4,5]
Output: 0
Explanation:
There is no time during the event not occupied by meetings.


Constraints:
1 <= eventTime <= 109
n == startTime.length == endTime.length
2 <= n <= 105
0 <= startTime[i] < endTime[i] <= eventTime
endTime[i] <= startTime[i + 1] where i lies in the range [0, n - 2].

*/
class Solution {
    public int maxFreeTime(int eventTime, int[] startTime, int[] endTime) 
    {
        int n=startTime.length;
        int[] freeTime=new int[n+1];
        int n1=freeTime.length;
        // To create freeTime array
        freeTime[0]=startTime[0];
        freeTime[n]=eventTime-endTime[n-1];
        for(int i=1;i<n;i++)
        {
            freeTime[i]=startTime[i]-endTime[i-1];
        }
        //Now this problem is similar to Reschedule Meetings for Maximum Free Time II=> apart from two areas
    //    1.we can only shift once and 2. At once we can change the order even!
    // Hence, there are three cases to be considered. 1.If no events changes happen, then max freeTime would be result.
    //2.If event change happens, there are two cases to be considered, i)CaseI: Event shift anywhere in the eventTime axis ii)CaseII:Event shift, in left or right side near to it's current position
    //for CaseII: it will always be, previous freeTime+nextfreeTime=>freeTime[i-1]+freeTime[i]
    //for CaseI: it will be previous freeTime+movedEventTimeDuration+nextfreeTime=>freeTime[i-1]+d+freeTime[i] where d is the moved event's endtime-startTime
    //Now to compute CaseI scenario we need to track of two things, one is,in order to move the event to it's leftside there must be enough space to accomodate current event, and same in the right hand side , while traversing the for each event to check if it can occupy space in it's left's or right it's better to precompute left most spaces and right most spaces for any event E. then we can move that event and add the same amount of time to our result.
     
     int[] leftFreeTime=new int[n1];
     int[] rightFreeTime=new int[n1];
   
     //Precompute leftfreeTime 
     for(int i=1;i<n1;i++)
     {
       leftFreeTime[i]=Math.max(freeTime[i-1],leftFreeTime[i-1]);
     }
    
      //Precompute rightfreeTime 
     for(int i=n1-2;i>=0;i--)
     {
       rightFreeTime[i]=Math.max(freeTime[i+1],rightFreeTime[i+1]);
     }
     int result=0;
     // Now comes the crux of the problem
     //will iterate through freeTime array
     for(int i=1;i<n1;i++)
     { 
        //to move this event we need similar space in left or right anywhere(for Case1), or just beside(Case2)
        int currEventTime=endTime[i-1]-startTime[i-1];
        //Case I
        if(currEventTime<=Math.max(leftFreeTime[i-1],rightFreeTime[i])) //Then Case1 is possible
        {
            result=Math.max(result,freeTime[i-1]+currEventTime+freeTime[i]);
        }
        //CaseII
        
        result=Math.max(result,freeTime[i-1]+freeTime[i]);
    } 
     return result;

    }
}
//TC:O(N)
//SC:O(N)
