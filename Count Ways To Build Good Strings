/*
Problem Description::
Given the integers zero, one, low, and high, we can construct a string by starting with an empty string, and then at each step perform either of the following:
Append the character '0' zero times.
Append the character '1' one times.
This can be performed any number of times.
A good string is a string constructed by the above process having a length between low and high (inclusive).
Return the number of different good strings that can be constructed satisfying these properties. Since the answer can be large, return it modulo 109 + 7.

Example 1:
Input: low = 3, high = 3, zero = 1, one = 1
Output: 8
Explanation: 
One possible valid good string is "011". 
It can be constructed as follows: "" -> "0" -> "01" -> "011". 
All binary strings from "000" to "111" are good strings in this example.

Example 2:
Input: low = 2, high = 3, zero = 1, one = 2
Output: 5
Explanation: The good strings are "00", "11", "000", "110", and "011".
 
Constraints:
1 <= low <= high <= 105
1 <= zero, one <= low
*/
class Solution {
    int Z=0;
    int O=0;
    int l=0;
    int h=0;
    final int M = 1_000_000_007;
    int count=0;
    public int countGoodStrings(int low, int high, int zero, int one) 
    {
        Z=zero;
        O=one;
        l=low;
        h=high;
        int[] dp=new int[h+1];
        Arrays.fill(dp,-1);
        return solve(0,dp);

    }
    
    private int solve(int len,int[] dp)
    {
        if(len>h)
        {
            return 0;
        }
        if(dp[len]!=-1)
        {
            return dp[len];
        }
        boolean addOne=false;
        if(len>=l && len<=h)
        {         
           addOne=true;
          // count+=1;
        }
        int add_One=solve(len+O,dp);
        int add_Zero=solve(len+Z,dp);

         dp[len]= (addOne ? 1 : 0) + add_One + add_Zero;
          dp[len]=dp[len]%M;
          return dp[len];

    }
}
//TC:O(N)
//SC:O(N);
