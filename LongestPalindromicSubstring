/* Problem Description::
Given a string s, return the longest palindromic substring in s.
Example 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Example 2:
Input: s = "cbbd"
Output: "bb"

Constraints:
    1 <= s.length <= 1000
    s consist of only digits and English letters.
*/

class Solution {
 
//TC:: O(n^2)
//SC:O(1)
    
    int maxlength=0;
    int startingindex=0;
    
    public String longestPalindrome(String s) 
    {
      for(int i=0;i<s.length();i++)
        {
            helper(s,i,i);//for odd numbers of alphabet in palindrome
            helper(s,i,i+1); //for even numbers of alphabet in palindrome            
        }
        
      return s.substring(startingindex,startingindex+maxlength) ;
    }
  
    public void helper(String s,int startindex,int endindex)
    {
    while(startindex>=0 && endindex<s.length() && (s.charAt(startindex)==s.charAt(endindex)))
        {                
            startindex--;
            endindex++;        
        }
           if(maxlength<endindex-startindex-1)
           {
               maxlength=endindex-startindex-1;
               startingindex=startindex+1;
           }
        
    }
}
