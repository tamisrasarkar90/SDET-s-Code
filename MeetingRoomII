/*
Problem Description::
Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.

Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2

Example 2:
Input: intervals = [[7,10],[2,4]]
Output: 1

Constraints:
    1 <= intervals.length <= 104
    0 <= starti < endi <= 106
*/
//TC:O(nlogn) & SC:O(n)
class Solution {
    public int minMeetingRooms(int[][] intervals)
    {
        Arrays.sort(intervals,(a,b)->a[0]==b[0] ? a[1]-b[1] : a[0]-b[0]);
        PriorityQueue<Integer> minheap=new PriorityQueue();
        
        for(int[] interval: intervals)
        {
            int left=interval[0]; //while traversing the intervals arrays current start
            int right=interval[1];  //while traversing the intervals arrays current end
 // minheap is consisting earlier end value only          
            if(!minheap.isEmpty() && minheap.peek()<=left)
            {
                minheap.remove();
            }
            minheap.offer(right);
        }
       return  minheap.size();    
    }
}
