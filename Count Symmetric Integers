/*
Problem Statement::
You are given two positive integers low and high.
An integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.
Return the number of symmetric integers in the range [low, high].


Example 1:
Input: low = 1, high = 100
Output: 9
Explanation: There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99.

Example 2:
Input: low = 1200, high = 1230
Output: 4
Explanation: There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.
 
Constraints:
1 <= low <= high <= 104

*/
class Solution {
    public int countSymmetricIntegers(int low, int high) 
    {
        int actualCount=0;
        int i=low;
        while(i<=high)
        {
            String newStr=String.valueOf(i);
            int n=newStr.length();
            if(n%2!=0)
            {
                i++;
            }
            else
            {
                String firstS=newStr.substring(0,n/2);
                String secondS=newStr.substring(n/2);
                int firstSum=0;
                int secondSum=0;

                for(int j=0;j<firstS.length();j++)
                {
                    char c=firstS.charAt(j);
                    int num=c-'0';
                    firstSum+=num;
                }
                for(int k=0;k<secondS.length();k++)
                {
                    char ch=secondS.charAt(k);
                    int num1=ch-'0';
                    secondSum+=num1;
                }
                if(firstSum==secondSum)
                {
                    actualCount+=1;
                }
                i++;
            }
        }

        return  actualCount;
    }
}
//TC:O(N+2(N/2))~TC:O(N/2)
//SC:O(1)
