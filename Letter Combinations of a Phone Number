****************Very Very Important*************************
Problem Description::
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
Example 1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

Example 2:
Input: digits = ""
Output: []

Example 3:
Input: digits = "2"
Output: ["a","b","c"]

Constraints:
    0 <= digits.length <= 4
    digits[i] is a digit in the range ['2', '9'].
  *************************************************************************Approach::************************************************************************************

class Solution {
    public List<String> letterCombinations(String digits) 
    {
        List<String> result=new ArrayList();
        String[] combos=new String[10];
        combos[2]="abc";
        combos[3]="def";
        combos[4]="ghi";
        combos[5]="jkl";
        combos[6]="mno";
        combos[7]="pqrs";
        combos[8]="tuv";
        combos[9]="wxyz";
        
        if(digits==null|| digits.length()==0)
        {
            return result;
        }
        else
        {
            helper(combos,result,digits,0,"");
        }  
        return result;
    }
    public static void helper(String[] combos,List<String> result,String digits,int index,String currentstring)
    {
        if(digits.length()==index)
        {
            result.add(currentstring);
            return;
        }
        String possiblechars=combos[digits.charAt(index)-'0'];
        for(char ch:possiblechars.toCharArray())
        {
            helper(combos,result,digits,index+1,currentstring+ch);
        }
    }
}
