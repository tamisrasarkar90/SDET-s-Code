/*
Problem Statement::
You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:

0 <= i < j < nums.length
nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])
Return the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.

 

Example 1:
*/
class Solution {
    public int countNicePairs(int[] nums) 
    {
        // Brute Force1
      /* int count=0;
        for(int i=0;i<nums.length;i++)
        {
             for(int j=i+1;j<nums.length;j++)
             {
                 if(nums[i] + rev(nums[j]) == nums[j] + rev(nums[i]))
                 {
                     count++;
                 }
             }
        }
        return count;
    }*/
         int count=0;
        //Intution is when will see nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])
        //then will group it like all i together and all j together
        int[] newarr=new int[nums.length];
        int MOD = 1000000007;
        Map<Integer,Integer> map=new HashMap();

        for(int i=0;i<nums.length;i++)
        {
             newarr[i]= nums[i]-rev(nums[i]);
        }

        for(int i=0;i<newarr.length;i++)
        {
             
             count=(count+ map.getOrDefault(newarr[i],0))%MOD;
             map.put(newarr[i],map.getOrDefault(newarr[i],0)+1);
        }

       return count;
    }  
    
    private int rev(int num)
    {
        int reverse=0;
        while(num>0)
        {
            int reminder=num%10;
            reverse=reverse*10+reminder;
            num=num/10;
        }
        return reverse;
    }
}










      /*  int count=0;
        //Intution is when will see nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])
        //then will group it like all i together and all j together
        int[] newarr=new int[nums.length];
        int MOD = 1000000007;
        Map<Integer,Integer> map=new HashMap();

        for(int i=0;i<nums.length;i++)
        {
             newarr[i]= nums[i]-rev(nums[i]);
        }

        for(int i=0;i<newarr.length;i++)
        {
             
             count=(count+ map.getOrDefault(newarr[i],0))%MOD;
             map.put(newarr[i],map.getOrDefault(newarr[i],0)+1);
        }

       return count;
    }
       /* for(int i=0;i<nums.length;i++)
        {
             for(int j=i+1;j<nums.length;j++)
             {
                 if(nums[i] + rev(nums[j]) == nums[j] + rev(nums[i]))
                 {
                     count++;
                 }
             }
        }
        return count;
    }*/

    //TC:O(NlogN)
    //SC:O(N)
