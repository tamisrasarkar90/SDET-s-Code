/*
ProbLem Description:
You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).
Return the maximum absolute sum of any (possibly empty) subarray of nums.
Note that abs(x) is defined as follows:
If x is a negative integer, then abs(x) = -x.
If x is a non-negative integer, then abs(x) = x.
 
Example 1:
Input: nums = [1,-3,2,3,-4]
Output: 5
Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.

Example 2:
Input: nums = [2,-5,1,-4,3,-2]
Output: 8
Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.

Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104 */

class Solution {
    public int maxAbsoluteSum(int[] nums)
    {
        //Approach2: Kadane's Algorithm
        int n=nums.length;
        int maxSum=nums[0];
        int currSum=nums[0];
         int minSum=nums[0];      
        //Kadane's algorithm to find Max
        for(int i=1;i<n;i++)
        {          
           currSum=Math.max(currSum+nums[i],nums[i]);           
           maxSum=Math.max(maxSum,currSum);
        }
        currSum=nums[0];
         //Kadane's algorithm to find MIN
        for(int i=1;i<n;i++)
        {
           currSum=Math.min(currSum+nums[i],nums[i]);   
           minSum=Math.min(minSum,currSum);
        }
        return Math.max(maxSum,Math.abs(minSum));  //In order to find Maximum absolute Sum of Any Subarray,we need to find Max of maxsum Subarray and minSumSubArray
    }
}
//TC:O(N)
//SC:O(1)



        /*
        //Approach 1: Brute Force; TC:O(N^2)
        int n=nums.length;
        int maxSum=0;
        for(int i=0;i<n;i++)
        {
            int sum=0;
            for(int j=i;j<n;j++)
            {
                sum+=nums[j];
                if(Math.abs(sum)>maxSum)
                {
                    maxSum=Math.abs(sum);
                }
            }
        }
        return maxSum;
    }
}
