Problem Description::
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
    Integers in each row are sorted from left to right.
    The first integer of each row is greater than the last integer of the previous row.
Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

Constraints:
    m == matrix.length
    n == matrix[i].length
    1 <= m, n <= 100
    -104 <= matrix[i][j], target <= 104
    
*******************************************************************Approach: Brute Force:: Time complexity::O(m*n) and space:O(1) ****************************************************

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) 
    {
        for(int i=0;i<matrix.length;i++)
        {
            for(int j=0;j<matrix[0].length;j++)
            {
               if(matrix[i][j]==target)
               {
                   return true;
               }
            }
        }
        return false;
    }
} 


//*****************************Approach 2:: Binary Search:: Time complexity::O(logmn): Space:O(1)******************************************************************************

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) 
    {
        int m=matrix.length;
        int n=matrix[0].length;
        int low=0;
        int high=m*n-1;
        int mid=0;
        int midelement=0;
        
        while(low<=high)
        {
          mid=low+(high-low)/2;
          midelement=matrix[mid/n][mid%n];
            if(target==midelement)
            {
                return true;
            }
            else if(target<midelement)
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return false;
    }
}
