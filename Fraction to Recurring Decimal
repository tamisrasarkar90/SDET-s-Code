/*
Problem Description: 
Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.If the fractional part is repeating, enclose the repeating part in parentheses.
If multiple answers are possible, return any of them.It is guaranteed that the length of the answer string is less than 104 for all the given inputs.

Example 1:
Input: numerator = 1, denominator = 2
Output: "0.5"

Example 2:
Input: numerator = 2, denominator = 1
Output: "2"

Example 3:
Input: numerator = 4, denominator = 333
Output: "0.(012)"
 
Constraints:
-231 <= numerator, denominator <= 231 - 1
denominator != 0
*/
class Solution {
    public String fractionToDecimal(int numerator, int denominator) 
    {
        StringBuilder sb=new StringBuilder();
        if((numerator<0 && denominator>0)||(numerator>0 && denominator<0))
        {
            sb.append('-');//in case if it is negative
        }
        long nume=Math.abs((long)numerator);
        long deno=Math.abs((long)denominator);
        long x=nume/deno;
        sb.append(x);
        long rem=0;
        rem=nume%deno;
        if(rem==0)
        {
            return sb.toString();
        }
        sb.append('.'); //incase fraction, then add first the result and '.'
        Map<Long,Integer> map=new HashMap(); 
        while(rem!=0)
        {
            if(map.containsKey(rem))
            {
               int idx= map.get(rem); //if reminder exists in map already then get the first position and add '('' and now in current pos add')''
               sb.insert(idx,'(');
               sb.append(')');
               break;
            }
            map.put(rem,sb.length()); //else put rem and it's index position in map, for next iteartion rem*10 is the next numerator and set this new numerator  deivide by denominator's reminder as new reminder,when reminder==0 return the string
            rem=rem*10;
            sb.append(rem/deno);
            rem=rem%deno;
        }
      return sb.toString();
    }
}
//TC:O(denominator)
///SC:O(denominator)
 
       /* float ans = 0;
        float deno = (float) denominator;
        float numerato = (float) numerator;
        ans = numerato / deno;
        String value = String.valueOf(ans);      
        if(value.substring(2).equals("0")) {
            value = value.substring(0, 1);
                return value;       
        }
            String preVal = value;

            String newStr = preVal.substring(2);
            if(newStr.length()>1) {
                Set<Character> set = new HashSet();
                int j = 0;
                for (; j < newStr.length(); j++) {
                    if (set.contains(newStr.charAt(j))) {
                        break;
                    } else {
                        set.add(newStr.charAt(j));
                    }
                }
                String newVal = newStr.substring(0, j);
                value = preVal.substring(0, 2) + "(" + newVal + ")";
            }

        return value;
    
    }
}*/
