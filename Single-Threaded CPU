/*
Problem Description::  You are given n​​​​​​ tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i​​​​​​th​​​​ task will be available to process at enqueueTimei and will take processingTimei to finish processing.

You have a single-threaded CPU that can process at most one task at a time and will act in the following way:

If the CPU is idle and there are no available tasks to process, the CPU remains idle.
If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.
Once a task is started, the CPU will process the entire task without stopping.
The CPU can finish a task then start a new one instantly.
Return the order in which the CPU will process the tasks.

Example 1:

Input: tasks = [[1,2],[2,4],[3,2],[4,1]]
Output: [0,2,3,1]
Explanation: The events go as follows: 
- At time = 1, task 0 is available to process. Available tasks = {0}.
- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.
- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.
- At time = 4, task 3 is available to process. Available tasks = {1, 3}.
- At time = 2, task 1 is available to process. Available tasks = {1}.
- At time = 3, task 2 is available to process. Available tasks = {1, 2}.
- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.
- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.
- At time = 10, the CPU finishes task 1 and becomes idle.
Example 2:

Input: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]
Output: [4,3,2,0,1]
Explanation: The events go as follows:
- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.
- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.
- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.
- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.
- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.
- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.
- At time = 40, the CPU finishes task 1 and becomes idle.
 

Constraints:

tasks.length == n
1 <= n <= 105
1 <= enqueueTimei, processingTimei <= 109

*/

class Solution {
    public int[] getOrder(int[][] tasks) 
    {
    
    
        int[] result=new int[tasks.length]; //Creating result array,which will keep track of processing order and at the end will return this.

        // This is to create another separate array which will consists of 3 elements i.e 0->index,1->availble time,2->processing time. Will insert within it from tasks and sort it.

        int[][] alltasks=new int[tasks.length][3];
        for(int i=0;i<tasks.length;i++)
        {
             alltasks[i][0]=i;
             alltasks[i][1]=tasks[i][0] ; //i.e. availble times 
             alltasks[i][2]=tasks[i][1] ; //i.e. processing times
        }
    //Sort the array on the basis of avaialble time
    Arrays.sort(alltasks,((a,b)->a[1]-b[1]));
    //Initialting an minheap as priorityqueue where will sort by processing time and if processing time is equal then will sort by index.
    PriorityQueue<int[]> minHeap=new PriorityQueue<int[]>((a,b)-> a[2] - b[2] == 0 ? a[0]-b[0] : a[2]-b[2]);
                                                        
    int i=0;
    int currtime=0;
    int index=0;
    while(i<tasks.length) //traverse the tasks array
    {
        while(i<tasks.length && currtime>=alltasks[i][1]) //if curr time is equals or greater than availale time,then add to priorityqueue
        {
            minHeap.add(alltasks[i++]);
        }
        if(minHeap.isEmpty())
        {
          currtime=alltasks[i][1];
        }
         if(!minHeap.isEmpty())
        {
           int[] currtask=minHeap.poll(); //will poll the value from minheap and keep it in array
           result[index++]=currtask[0]; // add in resultset by traversing currtasks,suppose there are 3 such tasks which has available time =<currtime and inside currtasks array they are kept on sorted on the basis of processing time or incase processing time is equals then sort by index.

           currtime+=currtask[2]; //update currtime=processing time of the current tasks,coz at that time CPU will only process that tasks.
        }

    }
    while(!minHeap.isEmpty()) //at the end while tasks traversal as end,check if minheap is not empty then simply process that task and add. to result.
    {
       int[] currtask=minHeap.poll(); //will poll all values from minHeap which having currtime=availble time
       result[index++]=currtask[0];
    }

        return result;

    }
}
//SC::O(N)+O(N)[for prorityqueue and array]~O(N)
//TC::O(NlogN)(for sorting Alltasks)+O(NlogN)(for sorting priorityqueue)+O(N)(for insertion tnto tasks array)0~O(NlogN)
