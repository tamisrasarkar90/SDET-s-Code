/*
Problem Description:
You are given a 0-indexed integer array nums and an integer p. Find p pairs of indices of nums such that the maximum difference amongst all the pairs is minimized. Also, ensure no index appears more than once amongst the p pairs.
Note that for a pair of elements at the index i and j, the difference of this pair is |nums[i] - nums[j]|, where |x| represents the absolute value of x.
Return the minimum maximum difference among all p pairs. We define the maximum of an empty set to be zero.

Example 1:
Input: nums = [10,1,2,7,1,3], p = 2
Output: 1
Explanation: The first pair is formed from the indices 1 and 4, and the second pair is formed from the indices 2 and 5. 
The maximum difference is max(|nums[1] - nums[4]|, |nums[2] - nums[5]|) = max(0, 1) = 1. Therefore, we return 1.

Example 2:
Input: nums = [4,2,1,2], p = 1
Output: 0
Explanation: Let the indices 1 and 3 form a pair. The difference of that pair is |2 - 2| = 0, which is the minimum we can attain.

Constraints:
1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= p <= (nums.length)/2
*/
class Solution {
    public int minimizeMax(int[] nums, int p) 
    {
        Arrays.sort(nums);
        int n=nums.length;
        int maxDiff=Integer.MAX_VALUE;
        int low=0;
        int high=nums[n-1]-nums[0];
   
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            //Check if we can get such p pairs which have difference as <=mid,then mid is a valid value and will store it as our result, and even we need to check if we get any value which is less than mid and valid(such as p pairs exists), then will choose that! Lastly we return when low>=high
            
    //Incase we get a valid pair within range of low and high, will store it in the result, but we move high to left to get slightly better result
          if(valid(nums,p,mid))
          {
            maxDiff=mid;
            high=mid-1;
          }
          else
          {
            low=mid+1;
          }
        }     
       return maxDiff;
    }
    
    private boolean valid(int[] nums,int p,int mid)
    {
        int i=0;
        int pairs=0;
        while(i<nums.length-1)
            {
                int currDiff=Math.abs(nums[i+1]-nums[i]);
                if(currDiff<=mid)
                {
                    i=i+2; //we get one such pair
                    pairs++;
                }
                else
                {
                    i++;
                }
            }
            return pairs>=p;
       }    
    }

    //TC:O(nlog(n))
    //SC:O(n)//Sorthing space
