/*
Problem  Description::
You are given an integer array nums consisting of 2 * n integers.

You need to divide nums into n pairs such that:

Each element belongs to exactly one pair.
The elements present in a pair are equal.
Return true if nums can be divided into n pairs, otherwise return false.

Example 1:
Input: nums = [3,2,3,2,2,2]
Output: true
Explanation: 
There are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs.
If nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions.
Example 2:
Input: nums = [1,2,3,4]
Output: false
Explanation: 
There is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.
 
Constraints:
nums.length == 2 * n
1 <= n <= 500
1 <= nums[i] <= 500

*/
class Solution {
    public boolean divideArray(int[] nums) 
    {
        int len=nums.length;
        int n=len/2;
        
        //Approach:1 ::Using HashMap
        Map<Integer,Integer> map=new HashMap();
        for(int num:nums)
        {
            map.put(num,map.getOrDefault(num,0)+1);
        }

        for(int key:map.keySet())
        {
            int val=map.get(key);
            if((val%2)!=0)
            {
                return false;
            }
        }
        return true; 
        //Approach 2: Using HashSet || TC:O(N) && SC:O(N)
        Set<Integer> set=new HashSet();
        for(int i=0;i<len;i++)
        {
           if(set.contains(nums[i]))
           {
             set.remove(nums[i]);
           }
           else
           {
            set.add(nums[i]);
           }
        }
      return set.size()==0;
      //Approach 3: Using a additional array ; TC:O(N)||SC:O(N)
      boolean[] newArr=new boolean[501]; //as constraints is 500
      Arrays.fill(newArr,true);
      
     for(int num:nums)
     {
          newArr[num]=!newArr[num];
     }
     for(int i=0;i<501;i++)
     {
        if(!newArr[i])
        {
            return false;
        }
     }
     return true;

     //Approach 4: Using Sorting  || TC:O(NLogN), SC:O(N)
     Arrays.sort(nums);
     for(int i=1;i<len;i=i+2)
     {
        if(nums[i-1]!=nums[i])
        {
             return false;
        }
     }
     return true;

     //Approach 5: Using sorting and XOR || TC:O(NlogN) ,SC:O(N)
      Arrays.sort(nums);
      for(int i=1;i<len;i=i+2)
     {
        int a= nums[i-1];
        int b=nums[i];
        if((a ^ b)!=0)
        {
            return false;
        }
     }
     return true;

    }
}
