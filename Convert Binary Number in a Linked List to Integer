/*
Problem Statement:
Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.Return the decimal value of the number in the linked list.
The most significant bit is at the head of the linked list.

Example 1:
Input: head = [1,0,1]
Output: 5
Explanation: (101) in base 2 = (5) in base 10

Example 2:
Input: head = [0]
Output: 0

Constraints:
The Linked List is not empty.
Number of nodes will not exceed 30.
Each node's value is either 0 or 1.

*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int getDecimalValue(ListNode head) 
    {
        //StringBuilder str=new StringBuilder();  
        int result=0;        
        while(head!=null)
        {
           //Now using bit manipulation all we need to do is left shift and perform OR operation
           result=result<<1|head.val;
           head=head.next;
        }       
        return result;
    }
}
/*
How it works: if result=000=> then with perform OR operation, coz if the curr val is 1 in OR it will be 1 always otherwise 0,now once we accomodate one value we need to left shift towards MSB to accomodate other value, thus in result the decimal value got store as it is integer
//TC:O(length of linkedList)
//SC:O(1)

*/
