/*Problem Description:: Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.
The words in paragraph are case-insensitive and the answer should be returned in lowercase.

Example 1:
Input: paragraph = "Bob hit a ball, the hit BALL flew far after it was hit.", banned = ["hit"]
Output: "ball"
Explanation: 
"hit" occurs 3 times, but it is a banned word.
"ball" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. 
Note that words in the paragraph are not case sensitive,
that punctuation is ignored (even if adjacent to words, such as "ball,"), 
and that "hit" isn't the answer even though it occurs more because it is banned.

Example 2:
Input: paragraph = "a.", banned = []
Output: "a"

Constraints:
    1 <= paragraph.length <= 1000
    paragraph consists of English letters, space ' ', or one of the symbols: "!?',;.".
    0 <= banned.length <= 100
    1 <= banned[i].length <= 10
    banned[i] consists of only lowercase English letters.
*/
**********************************************************TC:O(N+M)  and SC::O(N+M)*******************************************************************************************
class Solution {
    public String mostCommonWord(String paragraph, String[] banned) 
    {
        Map<String,Integer> map=new HashMap<String,Integer>();
        Set<String> set=new HashSet<String>();
        //after replace the punctuations with spaces,
        // and put all letters in lower case
        String  newone=paragraph.replaceAll("[^a-zA-Z0-9]"," ") .toLowerCase();
        String[] words=newone.split("\\s+");
        //Or this can be written like this way too:: here "\\W+" will remove all the non word characters i.e. punctuations and plus is more than one time occurance. 
       // String newone=paragraph.toLowerCase().split("\\W+");
        //Set<String> banned
        
        for(String w:banned)
        {
            set.add(w);
        }
        for(String str: words )
        {
            if(!set.contains(str))
            {
              map.put(str,map.getOrDefault(str,0)+1);
            }          
        }
        
       // 4). return the word with the highest frequency
      //  return Collections.max(map.entrySet(), Map.Entry.comparingByValue()).getKey();     
    int max=0;
    String result="";
    
    for(String word:map.keySet())
    {
        if(map.get(word)>max)
        {
            max=map.get(word);
            result=word;
        }
    }
    
    return result;
    }
}
