/*
Problem Description:: 
Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.
A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

Example 1:

Input: words = ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]
Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
"dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
Example 2:

Input: words = ["cat","dog","catdog"]
Output: ["catdog"]

Constraints:
1 <= words.length <= 104
1 <= words[i].length <= 30
words[i] consists of only lowercase English letters.
All the strings of words are unique.
1 <= sum(words[i].length) <= 105
*/
class Solution {
    public List<String> findAllConcatenatedWordsInADict(String[] words) 
    {
        int n=words.length;
        Set<String> wordset=new HashSet();
        List<String> result=new ArrayList();
        for(String word:words)
        {
            wordset.add(word); //First add everything to set
        }
        for(int i=0;i<n;i++)
        {
            if(isConcat(words[i],wordset)) //check each string is present is the set if yes add to result if not then leave
            {
                result.add(words[i]);
            }
        }
      return result;
    }
     public boolean isConcat(String s,Set<String> wordset)
     {
         for(int i=0;i<s.length();i++)
         {
             String prefix=s.substring(0,i+1); //iterate through each word and get prefix starting from 0 to i index
             String suffix=s.substring(i+1); //rest is suffix, check both is there in the set or only prefix is there and further divide into suffix that is also there in the set then return true else false
             if((wordset.contains(prefix) && wordset.contains(suffix)) ||
             (wordset.contains(prefix) && isConcat(suffix,wordset)))
             {
                 return true;
             }
         }
         return false;
         
     }

}

/*
Approach:: 
1) First capturing all words present in the given string array in a set
2) Now will iterate through the list of strings and for each string will check if it isConcat method ,if yes then will add into out result
3) Now to write isConcat method, will pass the word string and hashset which consists of all the strings present in the String array.
Now will take each string withing the string of arrays and will divide into prefix and suffix wise and simuntaneouly check if the prefix is present in the set ,if yes then will check if the suffix also presentin the set or will call isconcat(suffix) and to check if that present in the set. if present will return ture else false.

example:: Set:: cat,dog,catdog,d,o,g
now for dog prefix= d, suffix =og ,
d is present in the set will check for suffix =>og is not present in the set,now if we further divide 
og=> prefix =o,suffix g which is present in the set hence return true as concatenated word
TC::O(n*l^4) //SC::O(n)
*/
       
