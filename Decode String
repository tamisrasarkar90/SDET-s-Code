/*
Problem Statement:: Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.

 

Example 1:

Input: s = "3[a]2[bc]"
Output: "aaabcbc"
Example 2:

Input: s = "3[a2[c]]"
Output: "accaccacc"
Example 3:

Input: s = "2[abc]3[cd]ef"
Output: "abcabccdcdcdef"
 

Constraints:

1 <= s.length <= 30
s consists of lowercase English letters, digits, and square brackets '[]'.
s is guaranteed to be a valid input.
All the integers in s are in the range [1, 300].

*/
class Solution {
    public String decodeString(String s)
    {
        Stack<Integer> frequency=new Stack<Integer> ();
        Stack<StringBuilder> decode=new Stack();
        int k=0;
        StringBuilder currstr=new StringBuilder();
        
        for(char c:s.toCharArray())
        {
            if(Character.isLetter(c))
            {
                currstr.append(c);
            }
        
            else if(Character.isDigit(c))
            {
               k=k*10+(c-'0');
            }
            else if(c=='[')
            {
               frequency.push(k);
               k=0;
               decode.push(currstr);
               currstr=new StringBuilder();              
            }
            else if(c==']')
            {
                int freq= frequency.pop();
                StringBuilder temp=currstr;
                currstr=decode.pop();
                while(freq-->0)
                {
                    currstr.append(temp);
                }
                k=0;
            }
            
        }
        return currstr.toString();
    }
}
/* Intution:: First keep two stack one is to store number and one is to store alphabet,And one number variable one stringBuilder to store newly formed string. Now if encounter number while traversing the given string keep it is number variable if alphabet keep it Other stringbuilder variable ,Once encounter '[' opening brace push both character and number into the stack,once encounter ']' then pop the value from tboth the stack and build the currstr /.At the end retuen currstr.
TC::O(n)
SC:O(n)


*/
