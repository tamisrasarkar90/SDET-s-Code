/*
Problem Description::
Given an integer array nums, find the 
subarray with the largest sum, and return its sum.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 
Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
 
Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

*/
class Solution {
    public int maxSubArray(int[] nums) 
    {
        //Kadane's Algorithm
        int maxsum=nums[0];
        int currsum=nums[0];
        for(int i=1;i<nums.length;i++)
        {
            if(currsum>=0)
            {
                currsum+=nums[i];
            }
            else
            {
               currsum=nums[i];
            }
            if(maxsum<currsum)
            {
                maxsum=currsum;
            }
        }

        return maxsum;
    }
}

/*
TC::O(N)
SC:O(1)
Kadane's Algorithm'
Very Important in order to get the max sum subarray in O(N) time complexity. First we have to create two variable, running sum another totalsum, if anytime runningsum> totalsum, will update totalsum by the value of runningsum and will return totalsum at the end
 
 Now in order to calculate runningsum we need to check if runningsum is negative then no need to add nums[i] into runningsum but create a new subarray from nums[i], else if runningsum is positive then keep add nums[i]into it. 
 In the start initialize both the sum as first element of nums[] array.

*/
