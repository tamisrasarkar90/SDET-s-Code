/*Problem Description:: For two strings s and t, we say "t divides s" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times).
Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.
Example 1:
Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"

Example 2:
Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"

Example 3:
Input: str1 = "LEET", str2 = "CODE"
Output: ""

Constraints:
    1 <= str1.length, str2.length <= 1000
    str1 and str2 consist of English uppercase letters.
*/
//*************************************************************************************TC:O(n) & SC::O(1)*******************************************************************
class Solution {
    public String gcdOfStrings(String str1, String str2) 
    {
        //Here assuming str1 is the largest and str2 is smallest than str1.As per the problem statement str1 contains str2 repeatedly. so if below condition is not statisfy then there is no common match
    //for example: str1=ABABABAB
    //str2=ABA  then return null coz
       // str1+str2!=str2+str1
        //ABABABABABA !=ABAABABABAB 
        if(! (str1+str2).equals(str2+str1))
        {
            return "";
        }
        else if(str1.equals(str2))
        {
            return str1 ; //can return  str2 too!;
        }
        
 //remove the smallest string one from the biggest string..The leftover is answer string!
        else if(str1.length()> str2.length())
        {
            return gcdOfStrings(str1.substring(str2.length()),str2);
        }
        
       else           //(str1.length()< str2.length())
        {
            return gcdOfStrings(str2.substring(str1.length()),str1);
        } 
        
    }
}
