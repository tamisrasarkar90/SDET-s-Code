/*
Problem Description:
Alice is attempting to type a specific string on her computer. However, she tends to be clumsy and may press a key for too long, resulting in a character being typed multiple times.
Although Alice tried to focus on her typing, she is aware that she may still have done this at most once.
You are given a string word, which represents the final output displayed on Alice's screen.Return the total number of possible original strings that Alice might have intended to type.

Example 1:
Input: word = "abbcccc"
Output: 5
Explanation:
The possible strings are: "abbcccc", "abbccc", "abbcc", "abbc", and "abcccc".

Example 2:
Input: word = "abcd"
Output: 1
Explanation:
The only possible string is "abcd".

Example 3:
Input: word = "aaaa"
Output: 4

Constraints:
1 <= word.length <= 100
word consists only of lowercase English letters.

*/
class Solution {
    public int possibleStringCount(String word) 
    {
        int count=1; //for the first whole string
        int n=word.length();
        for(int i=1;i<n;i++)
        {
            if(word.charAt(i-1)==word.charAt(i))
            {
                   count+=1;
            }
        }
      /*  Map<Character,Integer> map=new HashMap();
        for(int i=0;i<n;i++)
        {
            map.put(word.charAt(i),map.getOrDefault(word.charAt(i),0)+1);
        }
        for(char key:map.keySet())
        {
            if(map.get(key)>1)
            {
               count+=map.get(key)-1;
            }
        }*/
        return count;
    }
}
//TC:O(N)
//SC:O(1)
