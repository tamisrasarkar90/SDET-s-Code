/* Problem Statement::
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.
Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

    I can be placed before V (5) and X (10) to make 4 and 9. 
    X can be placed before L (50) and C (100) to make 40 and 90. 
    C can be placed before D (500) and M (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer.

Example 1:
Input: s = "III"
Output: 3
Explanation: III = 3.

Example 2:
Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.

Example 3:
Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
Constraints:
    1 <= s.length <= 15
    s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
    It is guaranteed that s is a valid roman numeral in the range [1, 3999].

*/

/* Approach is very Important and Easy:: What we have to do is to keep the mentioned key-value pairs in Map. Now, We can traverse the array from backward or Forward,if traverse backward then once we encounter i,i-1 such that i-1<i then we subtract i-1 and add to the result set else we do a addition for i-1 and addto the resultset.
 Suppose, 
 CD-> D==500 we add to rsult set!
 Now while the next char is encounter as D i.e 100 will do resultset+=500-100.
 Similarly while traversing forward the  given String all characters we will for CD will add   i-1 first in resultset and then check the next char is greater than the prev one means
  i-1<i ,hence will add the i character and perform a subtraction of 2*(i-1). One two is for remove the char as i-1 added another for subtracting i-1 from i
 for c=100
 resultset=100
 now we got D=500
 so actually CD=400
 now will remove prev added C from resultset and from D will subtract C and add to the resultset. So resultset will consists of 400 now
*/
    
 
class Solution {
    public int romanToInt(String s) 
    {
        if(s.length()==0)
        {
            return 0;
        }
        Map<Character,Integer> map=new HashMap();
        int resultsum=0;
        map.put('I',1);
        map.put('V',5);
        map.put('X',10);
        map.put('L',50);
        map.put('C',100);
        map.put('D',500);
        map.put('M',1000);
        
      for(int i=0;i<s.length();i++)
      {
          if(i>0 && map.get(s.charAt(i-1))<map.get(s.charAt(i)))
          {
              resultsum-=map.get(s.charAt(i-1)); //one for already added lower value subtract form result
              resultsum+=map.get(s.charAt(i))-map.get(s.charAt(i-1)); //another for from isubtract the earlier value and then add to the result
          }
          else
          {
              resultsum+=map.get(s.charAt(i));
          }          
      }
        
        return resultsum;
    }
}
