/* Leetcode 783 and 530 are similar
Problem Description::
Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.

Example 1:
Input: root = [4,2,6,1,3]
Output: 1

Example 2:
Input: root = [1,0,48,null,null,12,49]
Output: 1
 
Constraints:
The number of nodes in the tree is in the range [2, 100].
0 <= Node.val <= 105
 
Note: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/
*/
//******************Similar Question:: ****************************************************************************************
/* 
Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.

Example 1:
Input: root = [4,2,6,1,3]
Output: 1

Example 2:
Input: root = [1,0,48,null,null,12,49]
Output: 1
 
Constraints:
The number of nodes in the tree is in the range [2, 104].
0 <= Node.val <= 105 
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     int answer=Integer.MAX_VALUE;
    TreeNode parent=null;
    public int getMinimumDifference(TreeNode root) 
    {
       //InOrder traversal
       //1. Left tree traversal
       if(root.left!=null)
       {
           getMinimumDifference(root.left);
       }

      // 2. root
       if(parent!=null)
       {
           //then need to update answer
           answer= Math.min(answer,root.val-parent.val);
       }
       //Now current root become parent and root=root.right while root.right!=null
       parent=root;

      //3.Right tree Traversal
       if(root.right!=null)
       {
           getMinimumDifference(root.right);
       }
       return answer;
    }
}

