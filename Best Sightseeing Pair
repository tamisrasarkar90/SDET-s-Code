/*
Problem Description::
You are given an integer array values where values[i] represents the value of the ith sightseeing spot. Two sightseeing spots i and j have a distance j - i between them.The score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them.
Return the maximum score of a pair of sightseeing spots.

Example 1:
Input: values = [8,1,5,2,6]
Output: 11
Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11

Example 2:
Input: values = [1,2]
Output: 2
 
Constraints:
2 <= values.length <= 5 * 104
1 <= values[i] <= 1000
*/
class Solution {
    public int maxScoreSightseeingPair(int[] values) 
    {
       // int maxSum=0;
      //Approach1:
      /*
        for(int i=0;i<values.length-1;i++)
        {
            for(int j=i+1;j<values.length;j++)
            {
                int currSum=values[i] + values[j] + i - j;
                 if(maxSum<currSum)
                 {
                       maxSum= currSum;
                 }
            }
        }*/
//TC:O(N^2)
//SC:O(1)
      //Approach 2:

      int[] leftMax=new int[values.length];
     
      leftMax[0]=values[0]+0;
      for(int i=1;i<values.length;i++)
      {
        int val= values[i]+i;       
          if(leftMax[i-1]>val)
          {
            leftMax[i]=leftMax[i-1];
          }
          else
          {
             leftMax[i]=val;
          }
      }
      int index=0;
      int maxVal=0;
      for(int j=1;j<values.length;j++)
      {
           int currVal=leftMax[index]+ values[j]-j;
           if(currVal>maxVal)
           {
             maxVal=currVal;
           }
           index++;
        
      }

      return  maxVal;
    }
}

//TC:O(N+N) ~ TC:O(2N) ~TC:O(N)
//SC:O(1)
