/*
Problem Description:
You are given a positive integer days representing the total number of days an employee is available for work (starting from day 1). You are also given a 2D array meetings of size n where, meetings[i] = [start_i, end_i] represents the starting and ending days of meeting i (inclusive).

Return the count of days when the employee is available for work but no meetings are scheduled.

Note: The meetings may overlap.

Example 1:
Input: days = 10, meetings = [[5,7],[1,3],[9,10]]
Output: 2
Explanation:
There is no meeting scheduled on the 4th and 8th days.

Example 2:
Input: days = 5, meetings = [[2,4],[1,3]]
Output: 1
Explanation:
There is no meeting scheduled on the 5th day.

Example 3:
Input: days = 6, meetings = [[1,6]]
Output: 0
Explanation:
Meetings are scheduled for all working days.
 

Constraints:
1 <= days <= 109
1 <= meetings.length <= 105
meetings[i].length == 2
1 <= meetings[i][0] <= meetings[i][1] <= days
*/
class Solution {
    public int countDays(int days, int[][] meetings) 
    {
        //Approach 1:Brute Force :TC::O(N^2)
      /*  List<Integer> list=new ArrayList();
        int dayCount=0;
        for(int i=0;i<meetings.length;i++)
        {
          int endDay=  meetings[i][1];
          int startDay=meetings[i][0];
          for(int j=startDay;j<=endDay;j++)
          {
            list.add(j);
          }
        }

        for(int k=1;k<=days;k++)
        {
            if(!list.contains(k))
            {
                dayCount++;
            }
        }
        return dayCount; */
        //Approach 2: By sorting: TC:O(NlogN)
        Arrays.sort(meetings, (a, b) -> Integer.compare(a[0], b[0]));
        int dayDiff=0;
        int endDay=0;
        for(int[] meet:meetings)
        {        
          if(meet[0]>endDay)
          {
            dayDiff+=meet[0]-endDay-1;
          }
          endDay=Math.max(endDay,meet[1]);
        }
          
        if(days>endDay)
        {
            dayDiff+=days-endDay;
        }
        return dayDiff;
    }
}
//TC:O(N)
//SC:O(1)
