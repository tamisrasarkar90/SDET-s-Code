/*
Problem Description: 
You are given an integer array nums and two integers k and numOperations.You must perform an operation numOperations times on nums, where in each operation you:
Select an index i that was not selected in any previous operations.Add an integer in the range [-k, k] to nums[i].Return the maximum possible frequency of any element in nums after performing the operations.

Example 1:
Input: nums = [1,4,5], k = 1, numOperations = 2
Output: 2
Explanation:
We can achieve a maximum frequency of two by:
Adding 0 to nums[1]. nums becomes [1, 4, 5].
Adding -1 to nums[2]. nums becomes [1, 4, 4].

Example 2:
Input: nums = [5,11,20,20], k = 5, numOperations = 1
Output: 2
Explanation:
We can achieve a maximum frequency of two by:Adding 0 to nums[1].

Constraints:
1 <= nums.length <= 105
1 <= nums[i] <= 105
0 <= k <= 105
0 <= numOperations <= nums.length
*/
class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) 
    {
        //Approach 1: TC:O(N) //SC:O(1)
        int maxEl=Arrays.stream(nums).max().getAsInt()+k;
        int n=nums.length;
        int[] freqArray=new int[maxEl+1];
        int result=0;
        for(int num:nums)
        {
           freqArray[num]++;
        }
       
        for(int i=1;i<freqArray.length;i++)
        {
            freqArray[i]+=freqArray[i-1];
        }
        //Now for each elements in nums we got the range of the numbers
        for(int target=0;target<=maxEl;target++)
        {           
            if(freqArray[target]==0)
            {
                continue;
            }          
            int l=Math.max(0,target-k);
            int r=Math.min(target+k,maxEl);
            int totalNumberInRange= freqArray[r]-(l>0 ? freqArray[l-1] :0);
            int targetNumbers=freqArray[target]-(target>0 ? freqArray[target-1] :0);
            int minNoOfConversion=Math.min(numOperations,totalNumberInRange-targetNumbers);
            result=Math.max(result,minNoOfConversion+targetNumbers);
        }

     return result;
    }
}
//Approach 1: TC:O(N) //SC:O(1) This freqArray first compute individual occurances and then compute the cumalative sum in order to get for one element how many total possible range of numbers which can be converted to this current target number, this is based on [a-k,a+k] can be converted into target a 
      /*  For totalNumber is in range(Can be converted to targetNum is)cumSum[r]-cumSum[l-1] where l=target-k and r=target+k,
      For targetNum, to evalute frequency of targetNum we need to do is,cumSum[target]-cumSum[target-1]
      Hence this difference between totalNumber-targetNum is number of conversions and we can convert only noofOpertaions times hence min of noofOpertaions and totalNumber-targetNum is our result addition to that max freq number which is out targetNum, Always evlaute max of current result store in result and this two!
      */
