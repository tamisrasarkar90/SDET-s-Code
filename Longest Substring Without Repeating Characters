/*Problem Description:: Given a string s, find the length of the longest substring without repeating characters.
Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

Constraints:
    0 <= s.length <= 5 * 104
    s consists of English letters, digits, symbols and spaces.
*/
class Solution {
//**********************************Approach:: TC:O(2n)(as in wrost case one char need to be //traverse for both i & j)********* and SC::O(n) as for using HashSet*********************
    
    public int lengthOfLongestSubstring(String s) 
    {
        Set<Character> set=new HashSet<Character>();
        int i=0;
        int j=0;
        int count=0;
        
        while(j<s.length())
        {
            //Step 1:: if i,j pointing to the same index,if Set is not consist it as of now,add               the char in set and update length.and move j pointer.
            if(!set.contains(s.charAt(j)))
            {
                set.add(s.charAt(j));
                count=Math.max(count,j-i+1);
                j++;
            }
 //When it encounter that s.charAt(j) is alreday in set then first remove s.charAt(i) from set and then move i and update the count variable accordingly.
          else
          {
              set.remove(s.charAt(i));
              i++;
          }
        
        }
        return count;
    }
} 

/*  **********************Approach2:: Using Hashmap and storing the index value**************
TC::O(n) and SC::O(n)[average O(1)]****************************** */
class Solution {    
    public int lengthOfLongestSubstring(String s) 
    {
        Map<Character,Integer> map=new HashMap<Character,Integer>();
        int i=0;
        int j=0;
        int count=0;
      while(j<s.length())
     {
        if(map.containsKey(s.charAt(j)))
        {
    // This is the optimization made with the above approach.Here we are directly moving i //pointer to the length where there is no duplicate instead by incrementing one by one and traverse the whole string again for wrost case
            i=Math.max(map.get(s.charAt(j))+1,i);
        }
             map.put(s.charAt(j),j);
             count=Math.max(count,j-i+1);
             j++;
      }
        
    return count;
    }
}
