/*Problem Description:: Given an integer n, return true if it is a power of four. Otherwise, return false.
An integer n is a power of four, if there exists an integer x such that n == 4x.

Example 1:
Input: n = 16
Output: true

Example 2:
Input: n = 5
Output: false

Example 3:
Input: n = 1
Output: true 

Constraints:
    -231 <= n <= 231 - 1

Follow up: Could you solve it without loops/recursion?
*/
/*class Solution {
    public boolean isPowerOfFour(int n)
    {
        if(n==0)
        {
            return false;
        }
        while(n!=1)
        {
            if(n%4!=0)
            {
                return false;
            }
            n=n/4;
        }
        return true;
    }
}*/

//TC:O(N)
//SC:O(1)
//*************************************Approach2:: TC::O(Constant,something  Math.log time)*******
class Solution {
    public boolean isPowerOfFour(int n) 
    {
        if(n==0)
        {
            return false;
        }
     // 4^x=input => log4(input)=x   =>   log(input)/log4=x =>hence if LHS is a complete number than anything like decimal/fractorial return false;
        return Math.log(n)/Math.log(4)%1==0;
    }
}
