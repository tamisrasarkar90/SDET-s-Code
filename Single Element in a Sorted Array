/*
Problem Description:: 
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
Return the single element that appears only once.
Your solution must run in O(log n) time and O(1) space.

Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:
Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:
1 <= nums.length <= 105
0 <= nums[i] <= 105
*/
/*class Solution {
    public int singleNonDuplicate(int[] nums) 
    {
        int ans=0;
        //Approach 1:: Using Map. //TC::O(N) //SC::O(N)
        Map<Integer,Integer> map=new HashMap();
        for(int num:nums)
        {
            map.put(num,map.getOrDefault(num,0)+1);
        }

       for(int key:map.keySet())
       {
           if(map.get(key)==1)
           {
               ans= key;
           }
       }
     return ans;
    }
}
//Approach 2:: Using two pointers //TC::O(N) //SC::O(1)

     class Solution {
     int singleNonDuplicate2(int[] nums) 
    {
        int ans=0;
       //As the array is sorted and all elements belongs to twice except one!
       int i=0;
       int j=i+1;
       while(j<nums.length)
       {
            if(nums[i]==nums[j])
            {
                j+=2;
                i+=2;
            }
            else
            {
                ans=nums[i];
            }
       }
       return ans;
    }
  }


//Approch 3::Binrary Search //TC::O(logn) //sc::O(1)
//The key concept is low=0 , high=nums.length-1 .mid=low+high/2. 
/*  
    Now if condition i) mid==even ,then check mid+1 if nums[mid]==nums[mid-1] then low=mid+1
    ii)mid==odd ,then check if mid-1 if nums[mid]==nums[mid-1] then low=mid+1
    iii)mid=even.  ,then check mid+1 if nums[mid]!=nums[mid-1] ,high=mid
    iv)mid=odd ,then check if mid-1 if nums[mid]!=nums[mid-1] then high=mid
    Return nums[low]
*/

   class Solution {
   public int singleNonDuplicate3(int[] nums) 
    {    
     int low=0;
     int high=nums.length-1;
     while(low<high)
     {
         int mid=low+(high-low)/2;
         if(mid%2==0) //mid even and check mid+1
         {
            if(nums[mid]==nums[mid+1])
            {
                low=mid+1;
            }
            else{
                high=mid;
            }
         }
         else //incase mid is odd then check mid-1
         {
             if(nums[mid]==nums[mid-1])
             {
                 low=mid+1;
             }
             else{
                 high=mid;
             }
         }
     }
     return nums[low];
    }
}


//Approch 4::By using XOR. the XOR of two same elements are zero, so while traverse the whole array only single element sustain ,rest all will get nullified //TC::O(N). //SC::O(1)
 
    class Solution {
    public int singleNonDuplicate(int[] nums) 
    {
       int ans=0;
       for(int num:nums)
       {
           ans^=num;
       }
    return ans;
}
    }









