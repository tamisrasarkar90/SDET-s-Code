/*
Problem Statement:
Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Example 1:
Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4

Example 2:
Input: matrix = [["0","1"],["1","0"]]
Output: 1

Example 3:
Input: matrix = [["0"]]
Output: 0
 
Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 300
matrix[i][j] is '0' or '1'.

*/
class Solution {
    public int maximalSquare(char[][] matrix) 
    {
        //Approach 1: TC:O(m*n) //SC:O(m*n)
        int m=matrix.length;
        int n=matrix[0].length;
        int[][] dp=new int[m][n];
        int result=0;
        if(m==0 || n==0)
        {
            return 0;
        }
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                //base condition
                
                if(matrix[i][j]=='1')
                {
                    if(i==0 ||j==0)
                   {
                     dp[i][j]=1;
                   }
                   else
                   {
                      dp[i][j]= 1+Math.min(dp[i][j-1],(Math.min(dp[i-1][j-1],dp[i-1][j])));
                   }
                      result=Math.max(result,dp[i][j]);     
                   
                }
                            
            }
        }
       return result*result;
    }
}
   
