/*Very VEry Important
Problem Statement:
You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.
Given an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.
In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.
Example 1:
Input: n = 3
Output: 5
Explanation: The five different ways are show above.

Example 2:
Input: n = 1
Output: 1
 
Constraints:
1 <= n <= 1000

*/
/*class Solution {
    int M=1000000007;
    int result=0;
    int[] dp=new int[1001];
    
    public int numTilings(int n) 
    {
        Arrays.fill(dp,-1);
         return solve(n);      
    }
    public int solve(int n)
    {
        //Base Condition
        if(n==1||n==2)
        {
            return n;
        }
        if(n==3)
        {
            return 5;
        }
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        
       dp[n]=(int)((2L*solve(n-1)%M+solve(n-3))%M);
       return dp[n];
       
    }
}*/

//Bottom Up
class Solution {
   
    public int numTilings(int n) 
    {
         int M=1000000007;
        
        if(n==1)
        {
            return 1;
         }
        if(n==2)
        {
            return 2;
        }
        if(n==3)
        {
            return 5;
        }
        
       int[] dp=new int[1001];
    
        dp[1]=1;
        dp[2]=2;
        dp[3]=5;
        for(int i=4;i<=n;i++)
        {
            dp[i]=(int)((2L*dp[i-1]%M+dp[i-3])%M);
        }
        return dp[n];
    }
}
