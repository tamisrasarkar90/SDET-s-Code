/*
Problem Description:: There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

Example 1:

Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].
Example 2:

Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4
Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.
Example 3:

Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].
- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].
 
Constraints:

1 <= points.length <= 105
points[i].length == 2
-231 <= xstart < xend <= 231 - 1

*/
class Solution {
    public int findMinArrowShots(int[][] points) 
    {
        int arrowcount=1;
        //We need to sort the array by previous element's end point with current element's end point.We need to check previous element's end point and current element's start point.Current element's start should less than or equals of previous element's end. Then one arrow can brust both of the ballons else 2 arrows are required

        Arrays.sort(points,(a,b)->Integer.compare(a[1],b[1])); //(1,6),(2,8),(7,12),(10,16)
        int reach=points[0][1];   // first element end
        
        for(int i=1;i<points.length;i++)
        {
            if(points[i][0]<=reach) //i.e next ballons start is within current ballons end so one arrow can crust both of them.
            {
                 // we simple ignore and go to next ballons as one arrow is suffice here!
            }
            else
            {
               arrowcount++;
               reach=points[i][1]; //else we need two arrows to brust two ballons and reach updated to current ballons end in order to compare with the next ballon's 'start
            }

        }
      
     return arrowcount;
    }
}
//TC::O(nlogn) as nlogn for java comparator +n for for loop ~ 2nlogn~NlogN
//SC::O(1)
