/* 
Problem Description:: Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.
Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

Constraints:
    0 <= nums.length <= 105
    -109 <= nums[i] <= 109
    nums is a non-decreasing array.
    -109 <= target <= 109
*/
//**********************************Approach::BinarySearch TC::O(logn) and SC::O(1)*****************************************************************************************************
class Solution {
    public int[] searchRange(int[] nums, int target) 
    {
    int high=nums.length-1;
		int low=0;
		if(high<0)
		{
			return new int[] {-1,-1};
		}
		//Searching for start position
		while(high>low)
		{
			int mid=low+(high-low)/2;
			if(nums[mid]<target)
			{
				low=mid+1;
			}
			else
			{
				high=mid;
			}
		}
		int[] result=new int[] {-1,-1};
		if(nums[low]==target)
		{
			result[0]=low;
		}
		//Finding end position
		low=0;
		high=nums.length-1;
		while(high>low)
		{
			int mid=low+(high-low+1)/2;  // Check this we have added +1 in order to right inclined the search and mid
			if(nums[mid]<=target)
			{
				low=mid;
			}
			else
			{
				high=mid-1;
			}
		}
		if(target==nums[low])
		{
			result[1]=low;
		}
		return result;
    }
  }
