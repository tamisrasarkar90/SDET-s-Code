/* 
Problem Description::  You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.Merge all the linked-lists into one sorted linked-list and return it.

Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:
Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: []

Constraints:
    k == lists.length
    0 <= k <= 104
    0 <= lists[i].length <= 500
    -104 <= lists[i][j] <= 104
    lists[i] is sorted in ascending order.
    The sum of lists[i].length will not exceed 104.
*/
//******************************************Using PriorityQueue:: TC:O(Nlogk) and SC::O(k)************************************************************************************
class Solution {
    public ListNode mergeKLists(ListNode[] lists)
    { 
        if(lists == null || lists.length ==0)
        {
            return null;
        }
    Comparator<ListNode> customcomparator=new Comparator<ListNode>()   //Comparator is an interface hence anonymous class to implement method compare has been used.
    {
      @Override
      public int compare(ListNode l1,ListNode l2)
      {
          return l1.val-l2.val;
      }
    
    };
     PriorityQueue<ListNode> pq=new PriorityQueue<ListNode>(customcomparator);
     for(ListNode list:lists)
     {
        if(list!=null)
        {
          pq.offer(list);
        }
     }
     //Creating list to return as resultant list
     ListNode dummy=new ListNode(-1);
     ListNode t=dummy;
     // While remove and merging into resultant list(comparison of value has been done in comparator within PriorityQueue)
     while(!pq.isEmpty())
     {
       ListNode leastValNode=pq.remove();
       t.next=leastValNode;
       t=t.next;
       if(leastValNode.next!=null) // that means the traversal for that particular list has not yet been completed
       {
         pq.offer(leastValNode.next) // add next item to pq as that particular list traversal has not been done yet.
       }
     }
      return dummy.next;
        }
    }
