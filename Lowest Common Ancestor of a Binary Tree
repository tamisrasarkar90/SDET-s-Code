/*Problem Description::
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1

Constraints:
    The number of nodes in the tree is in the range [2, 105].
    -109 <= Node.val <= 109
    All Node.val are unique.
    p != q
    p and q will exist in the tree.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
/*Approch is preety simple: Will just traverse the tree left and right wise if p or q found in left subtree and /or right subtree 1)return that else 2)return null if for a root bth left and right returning not null then rot is the LCA

TC::O(N)
SC::O(Heightoftree)

*/
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) 
    {
      if(root==null||p==null|q==null)
      {
        return null;
      }
      TreeNode left=lowestCommonAncestor(TreeNode root.left, TreeNode p, TreeNode q);
      TreeNode right=lowestCommonAncestor(TreeNode root.right, TreeNode p, TreeNode q);
      if(left!=null && right!==null)
      {
        return root;
      }
      else if(left==null && right===null)
      {
       return null;
      }
      return left!=null?left:right;
    }
  }
