/*
Problem Statement:
Given a list of folders folder, return the folders after removing all sub-folders in those folders. You may return the answer in any order.
If a folder[i] is located within another folder[j], it is called a sub-folder of it. A sub-folder of folder[j] must start with folder[j], followed by a "/". For example, "/a/b" is a sub-folder of "/a", but "/b" is not a sub-folder of "/a/b/c".
The format of a path is one or more concatenated strings of the form: '/' followed by one or more lowercase English letters.For example, "/leetcode" and "/leetcode/problems" are valid paths while an empty string and "/" are not.
 
Example 1:
Input: folder = ["/a","/a/b","/c/d","/c/d/e","/c/f"]
Output: ["/a","/c/d","/c/f"]
Explanation: Folders "/a/b" is a subfolder of "/a" and "/c/d/e" is inside of folder "/c/d" in our filesystem.

Example 2:
Input: folder = ["/a","/a/b/c","/a/b/d"]
Output: ["/a"]
Explanation: Folders "/a/b/c" and "/a/b/d" will be removed because they are subfolders of "/a".

Example 3:
Input: folder = ["/a/b/c","/a/b/ca","/a/b/d"]
Output: ["/a/b/c","/a/b/ca","/a/b/d"]
 

Constraints:
1 <= folder.length <= 4 * 104
2 <= folder[i].length <= 100
folder[i] contains only lowercase letters and '/'.
folder[i] always starts with the character '/'.
Each folder name is unique.

*/
class Solution {
    public List<String> removeSubfolders(String[] folder) 
    {
        //Approach 1: Sorting
        List<String> answer=new ArrayList();
        Arrays.sort(folder);
        answer.add(folder[0]);
        for(int i=1;i<folder.length;i++)
        {
           String currStr=folder[i];
           String lastStr=answer.get(answer.size()-1);
           lastStr=lastStr+'/';
           if(!currStr.startsWith(lastStr))
           {
             answer.add(currStr);
           }
        }
       return answer;
    }
}
//TC:(N*LlogN)//SC:(N*L)//space for sorting



        //Approach:2: TC:O(N*(L*L)) //where L is the string length and N is string array length, SC:O(N)
             
        Set<String> original=new HashSet<>(Arrays.asList(folder));
        List<String> answer=new ArrayList();
        
        int n=folder.length;
        for(int i=0;i<n;i++)
        {
            String  currStr=folder[i];
            boolean isSubFolder=false;
            String  tempStr=currStr;
            int len=currStr.length();
            while(!currStr.isEmpty())
            {
                int pos=currStr.lastIndexOf('/');
                if(pos==-1)
                {
                    break; //no more '/' found
                }
                currStr=currStr.substring(0,pos);
                if(original.contains(currStr))
                {
                   isSubFolder=true;
                }
            }
            if(!isSubFolder)
            {
                answer.add(tempStr);
            }
        }
        return answer;
    }
}
