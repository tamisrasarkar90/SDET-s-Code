/*
Problem Description::
The Tribonacci sequence Tn is defined as follows: 

T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given n, return the value of Tn.

Example 1:

Input: n = 4
Output: 4
Explanation:
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4
Example 2:

Input: n = 25
Output: 1389537
 

Constraints:
0 <= n <= 37
The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.

*/
class Solution {
    public int tribonacci(int n) 
    {
        if(n<=1)
        {
            return n;
        }
        else if(n==2)
        {
            return 1;
        }
        //return  tribonacci(n-3)+ tribonacci(n-2)+tribonacci(n-1);
     /* 
     Approach1 
        int i=0;
        int j=1;
        int k=1;
        int sum=0;
        
        for(int m=3;m<=n;m++)
        {
            sum=i+j+k;
            i=j;
            j=k;
            k=sum;

        }
        return k;*/

    //Approach2::
    int[] result =new int[n+1];
    result[0]=0;
    result[1]=1;
    result[2]=1;
    for(int i=3;i<=n;i++)
    {
        result[i]=result[i-3]+result[i-2]+result[i-1];
    }
     return result[n];
    }
}
//TC:O(1) //SC::O(1)
