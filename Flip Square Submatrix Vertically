/*
Problem Statement:
You are given an m x n integer matrix grid, and three integers x, y, and k.The integers x and y represent the row and column indices of the top-left corner of a square submatrix and the integer k represents the size (side length) of the square submatrix.
Your task is to flip the submatrix by reversing the order of its rows vertically.Return the updated matrix.

Example 1:
Input: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], x = 1, y = 0, k = 3
Output: [[1,2,3,4],[13,14,15,8],[9,10,11,12],[5,6,7,16]]
Explanation:
The diagram above shows the grid before and after the transformation.

Example 2:
Input: grid = [[3,4,2,3],[2,3,4,2]], x = 0, y = 2, k = 2
Output: [[3,4,4,2],[2,3,2,3]]
Explanation:
The diagram above shows the grid before and after the transformation.

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 50
1 <= grid[i][j] <= 100
0 <= x < m
0 <= y < n
1 <= k <= min(m - x, n - y)
*/
class Solution {
    public int[][] reverseSubmatrix(int[][] grid, int x, int y, int k) 
    {
        //Approach 2: Optimal inplace swap //TC:O(N^2) //SC:O(1)
        int m=grid.length;
        int n=grid[0].length;
        //row wise traverse
        for(int i=y;i<y+k;i++)
        {
            int top=x;
            int bottom=x+k-1;
            while(top<bottom)
            {
            //Swap element
            int temp=grid[top][i];
            grid[top][i]=grid[bottom][i];
            grid[bottom][i]=temp;
            top++;
            bottom--;

            }
        }
       return grid;
    }
}
        //Approach1: TC:O(N^2) //SC:O(N): Brute Force Extra space
       /* int m=grid.length;
        int n=grid[0].length;
        int strow=x;
        int stcol=y;
        int[][]trans=new int[k][k];
        //to create a temp matrix
        for(int i=0;i<k;i++)
            {
                for(int j=0;j<k;j++)
                    {
                        trans[i][j]=grid[i+x][j+y];
                    }
            }
            //Now transpose the temp matrix
        for(int i=0;i<k;i++)
        {  
        int top=0;
        int bottom=trans[i].length-1;
        while(top<bottom)
        {
            //Swap element
            int temp=trans[top][i];
            trans[top][i]=trans[bottom][i];
            trans[bottom][i]=temp;
            top++;
            bottom--;
        }
     }  

     for(int i=0;i<k;i++)
     {
        for(int j=0;j<k;j++)
        {
            grid[i+x][j+y]=trans[i][j];
        }
     }
        
     return grid;   
    }
}*/
