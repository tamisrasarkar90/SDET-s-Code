/*
Problem Statement:
Given an integer n, return true if it is a power of four. Otherwise, return false.An integer n is a power of four, if there exists an integer x such that n == 4x.

Example 1:
Input: n = 16
Output: true

Example 2:
Input: n = 5
Output: false

Example 3:
Input: n = 1
Output: true
 
Constraints:
-231 <= n <= 231 - 1

*/
class Solution {
    public boolean isPowerOfFour(int n) 
    
    {
        //Approach: 4: another observation holds good for power of four is, if a number is power of 4 then the num-1 is always divisible by 3
// Bit Manipulation: TC:O(1)//SC:O(1)
        //As the number which is power 4 would be power of 2 as well we can apply bit manipulation same process as in case of 2
        //4=>2^(2)

        return n>0 && (n & (n-1))==0 && (n-1)%3==0 ;
        //TC:O(1)//SC:O(1)
   
    }  

     //Approach 3: Brute Force ||TC:O(log4(n))//SC:O(1)
        if(n==0)
        {
            return false;
        }      
        while(n%4==0)
        {
            n=n/4;
        }
        return n==1;
    }
}


        
        //Approach: 2: If we take log(n)/log(4) then the value x should be same as 4^x=n
        if(n<=0)
        {
            return false;
        }
        int x=(int)((Math.log(n))/(Math.log(4)));
        if(Math.pow(4,x)==(int)n)
        {
            return true;
        }
        return false;
    }
}
        
        //Approach1: TC:O(1)~20*20//SC:O(1)
        if(n==2147483647)
        {
            return false;
        }
        Set<Integer> set=new HashSet();
        for(int i=0;i<17;i++)
        {
            set.add((int)Math.pow(4,i));
        }
        for(int num:set)
        {
            if(set.contains(n))
            {
                return true;
            }
        }
        return false; 
    }
}



//2^31-1=>   2147483647
//4^19=>   274877906944
