Problem Description:: A permutation of an array of integers is an arrangement of its members into a sequence or linear order.For example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).For example, the next permutation of arr = [1,2,3] is [1,3,2] Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
 While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.Given an array of integers nums, find the next permutation of nums.
The replacement must be in place and use only constant extra memory. 

Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]

Example 2:
Input: nums = [3,2,1]
Output: [1,2,3]

Example 3:
Input: nums = [1,1,5]
Output: [1,5,1]

**********************************************************************Approach::Time Complexity::O(n) and Space::O(1)*************************************************************************************
/*Approach:: 1) First traverse the array from last nums.length-2  to index=0; and find where nums[i]<nums[i+1]
2)Then store i to a variable called index and break the loop
3) Then search for just greater element of nums[i] in nums[i] right till nums[nums.length-1] and swap nums[i] with that close greater element of nums[i]
4) reverse from nums[i+1] to nums[nums.length-1] and return.

*/
class Solution {
    public void nextPermutation(int[] nums) 
    {
        int index=-1;
       for(int i=nums.length-2;i>=0;i--)
       {
           if(nums[i]<nums[i+1])
           {
             index=i;
               break;
           }
       }
        
//for swap the next greater element of nums[i] with nums[i] from the right side of nums[i] till array end
        if(index!=-1)
        {
        for(int j=nums.length-1;j>index;j--)
        {
        if(nums[j]>nums[index])
        {
         swap(nums,index,j);
          break;
        }  
        }
            
        }     
        
//reverse till the end of array from index+1
        int r=nums.length-1;
        int l=index+1;
        while(l<r)
        {
            swap(nums,l,r);
            l++;
            r--;
        }
    }
     public static void swap(int[] nums,int m,int n)
        {
            int temp=nums[m];
            nums[m]=nums[n];
            nums[n]=temp;
        }
}
