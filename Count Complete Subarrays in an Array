/*
Problem Statement:
You are given an array nums consisting of positive integers.

We call a subarray of an array complete if the following condition is satisfied:

The number of distinct elements in the subarray is equal to the number of distinct elements in the whole array.
Return the number of complete subarrays.

A subarray is a contiguous non-empty part of an array.

 

Example 1:

Input: nums = [1,3,1,2,2]
Output: 4
Explanation: The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].
Example 2:

Input: nums = [5,5,5,5]
Output: 10
Explanation: The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2000


*/
class Solution {
    public int countCompleteSubarrays(int[] nums) 
    {
        int i=0;
        int n=nums.length;
        int j=0;
        int result=0;
        Set<Integer> set=new HashSet();
        for(int num:nums)
        {
            set.add(num);
        }
        int  count=set.size();
        Map<Integer,Integer> map=new HashMap();

        while(j<n)
        {
           map.put(nums[j],map.getOrDefault(nums[j],0)+1);

           while(map.size()==count)
           {
            //So we got a valid subarray
            result+=(n-j) ;//Calculation is,suppose we got for a subarray from a->c and there are 3 elements after c then including those as well the subarray becomes valid so total no of subarray is 3+1 which are valid
            //a,b,c,d,e,f=> if a,b,c is a valid one then a,b,c,d is also a valid one and a,b,c,e also and a,b,c,d,e,f also another valid one! 

            //Now we can shrink i //Sliding window
            
                map.put(nums[i],map.get(nums[i])-1);
                if(map.get(nums[i])==0)
                {
                    map.remove(nums[i]);
                }
                 
                i++; 
           }                   
        j++;
    }
        return result;
    }
}
//TC:O(N)
//SC:O(N)
