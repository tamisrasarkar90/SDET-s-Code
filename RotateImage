/* Most Important:: Problem Description:: You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]
Example 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
Constraints:
    n == matrix.length == matrix[i].length
    1 <= n <= 20
    -1000 <= matrix[i][j] <= 1000
 Time Complexity::O(m) & space complexity::O(1)
*/
class Solution {
    public void rotate(int[][] matrix)
    {
//Approach:: First we need to take a transpose of matrix so that row becomes column and vice versa.Then we reverse it by rowwise.Hence without using any extra space can rotate 90 to grid
//Take a Transpose::
        for(int i=0;i<matrix.length;i++)
        {
            for(int j=i;j<matrix[0].length;j++) 
                
//remember while taking transpose we only take it on upper trapisum/lower trapisum of the matrix.coz If we include whole matrix then apart from diagonally valued rest all will swap twice hence back to it's original.
            {
                int temp= matrix[i][j];
                matrix[i][j]=matrix[j][i];
                matrix[j][i]=temp;              
            }
        }
        //taking reverse row wise
    for(int i=0;i<matrix.length;i++)
    {
        int left=0;
        int right=matrix.length-1;
        while(left<right)
        {
            int t= matrix[i][right];
            matrix[i][right]=matrix[i][left];
            matrix[i][left]=t;
            left++;
            right--;
        }
    }  
        
    }
}
