/*
Problem Statement:: You are given an array nums of n positive integers.
You can perform two types of operations on any element of the array any number of times:
If the element is even, divide it by 2.
For example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2].
If the element is odd, multiply it by 2.
For example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4].
The deviation of the array is the maximum difference between any two elements in the array.

Return the minimum deviation the array can have after performing some number of operations.

Example 1:
Input: nums = [1,2,3,4]
Output: 1
Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.

Example 2:
Input: nums = [4,1,5,20,3]
Output: 3
Explanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.

Example 3:
Input: nums = [2,10,8]
Output: 3

Constraints:
n == nums.length
2 <= n <= 5 * 104
1 <= nums[i] <= 109

*/
class Solution {
    public int minimumDeviation(int[] nums) 
    {
/*
Approach :First find the odd elements from the array and multiply by 2 and add to TreeSet/PriorityQueue in order to get sorted value. Now will not bother about odd values within array. Now will check max and min value in the array,will calculate the difference between max and min and update one diff variable. Now if max happens to be even there is chance to further reduce it so that diff becomes min.Once the max value is odd will return the diff.
*/
       TreeSet<Integer> tset=new TreeSet<Integer>();
       int actualdiff=Integer.MAX_VALUE;
       for(int num:nums)
       {
           if(num%2==1)
           {
              tset.add(num*2);
           }
           else{
               tset.add(num);
           }
       }
       while(true)
       {
           int min=tset.first();
           int max=tset.last();
           int currdiff=max-min;
           actualdiff=Math.min(actualdiff,currdiff);
           if(max%2==0)
           {
               tset.remove(max);
               tset.add(max/2);
           }
          else{
            return actualdiff;
          }         
       }
    }
  }
  //TC::O(nlogn)
  //SC:O(n)
