/*
Problem Description:
You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.

Return any such subsequence as an integer array of length k.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [2,1,3,3], k = 2
Output: [3,3]
Explanation:
The subsequence has the largest sum of 3 + 3 = 6.
Example 2:

Input: nums = [-1,-2,3,4], k = 3
Output: [-1,3,4]
Explanation: 
The subsequence has the largest sum of -1 + 3 + 4 = 6.
Example 3:

Input: nums = [3,4,3,3], k = 2
Output: [3,4]
Explanation:
The subsequence has the largest sum of 3 + 4 = 7. 
Another possible subsequence is [4, 3].
 

Constraints:

1 <= nums.length <= 1000
-105 <= nums[i] <= 105
1 <= k <= nums.length

*/
class Solution {
    public int[] maxSubsequence(int[] nums, int k) 
    {
      int n=nums.length;
      int[][] val=new int[n][2];
      for(int i=0;i<n;i++)
      {
        val[i][0]=i;
        val[i][1]=nums[i];
      }
      Arrays.sort(val,(x1,x2)->Integer.compare(x2[1],x1[1]));
      int[] result=new int[k];
      //now select first k elements and sort them by their indexn order
      Arrays.sort(val,0,k,(x1,x2)->Integer.compare(x1[0],x2[0]));
      //Now iterate through avl and put hte value into result array
      for(int j=0;j<k;j++)
      {
        result[j]=val[j][1];
      }

      return result;
    }
}
        /*int n=nums.length;
        int[] newnums=new int[n];
        for(int i=0;i<n;i++)
        {
            newnums[i]=nums[i];
        } 
         Arrays.sort(newnums);
         int index=0;
         int i=n-1;
        // int[] sub= new int[n];
         List<Integer> list=new ArrayList();
         while(k>0)
         {
           list.add(newnums[i]);
           i--;
           k--;
           //index++;
         }
         list.siz+         int[] sub= new int[n];
         for(int j=0;j<n;j++)
         {
            if(list.contains(nums[j])
            {

            }
         }
               
         return sub;
    }
}*/

//TC:O(nlog(n))
//SC:O(n)
