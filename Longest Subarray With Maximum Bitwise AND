/*
Problem Description:
You are given an integer array nums of size n.Consider a non-empty subarray from nums that has the maximum possible bitwise AND.
In other words, let k be the maximum value of the bitwise AND of any subarray of nums. Then, only subarrays with a bitwise AND equal to k should be considered.Return the length of the longest such subarray.
The bitwise AND of an array is the bitwise AND of all the numbers in it.A subarray is a contiguous sequence of elements within an array.

Example 1:
Input: nums = [1,2,3,3,2,2]
Output: 2
Explanation:
The maximum possible bitwise AND of a subarray is 3.
The longest subarray with that value is [3,3], so we return 2.

Example 2:
Input: nums = [1,2,3,4]
Output: 1
Explanation:
The maximum possible bitwise AND of a subarray is 4.
The longest subarray with that value is [4], so we return 1.

Constraints:
1 <= nums.length <= 105
1 <= nums[i] <= 106

*/
class Solution {
    public int longestSubarray(int[] nums) 
    {
        /*While AND operation any two different values AND should be less than or equals to any one those value, can't be greater, hence to find max AND we need to find same repetative value(then only AND becomes the same of that value)which is max on that array and as higher steak(longest subarray)
        */
        int n=nums.length;
        List<Integer> temp=new ArrayList();
        for(int num:nums)
        {
            temp.add(num);
        }
        Collections.sort(temp);
        int maxLen=0;
        int currLen=0;
        int maxVal=temp.get(temp.size()-1);
        int i=0;
        while(i<n)
        {
            if(nums[i]==maxVal)
            {
              currLen+=1;             
            }
            else
            {
                currLen=0;
            }
            i++;
            maxLen=Math.max(maxLen,currLen);
        }
        return maxLen;
    }
}
//TC:O(n+log(n))
//SC:O(n)
