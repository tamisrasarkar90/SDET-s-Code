/*Problem Statement:: Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.In one step, you can delete exactly one character in either string.
Example 1:
Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".

Example 2:
Input: word1 = "leetcode", word2 = "etco"
Output: 4

Constraints:
    1 <= word1.length, word2.length <= 500
    word1 and word2 consist of only lowercase English letters.
*/
//*************************************************************************TC::O(M*N) and SC::O(M*N)*********************************************************************
class Solution {
    public int minDistance(String word1, String word2) 
    {
        
 // The formula to evalute minimum deletion required for Longest common subsequence(LCS) is::
// Minimum deletion required= str1.length()+str2.length() -2*LCS.length()        

    int lcs= getmindelete(word1,word2);
    return word1.length()+word2.length()-2* lcs;
             
    }

public static int getmindelete(String word1, String word2)
{
    int[][] dp =new int[word1.length()+1][word2.length()+1];
    for(int i=1;i<=word1.length();i++)
    {
        for(int j=1;j<=word2.length();j++)
        {
            // if for two string the last char matches,i.e A= xxxxxxa and B=zzza then,
           if(word1.charAt(i-1)==word2.charAt(j-1))
           {
                dp[i][j]=1+dp[i-1][j-1];
           }
    // if A=xxxxxa ,B=zzzzc i.e last character doesnot match then,
          else
          {
              dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
          }
            
        }
    }
    
    return dp[word1.length()][word2.length()] ;
  }

}
