/*Problem Description::
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.

Constraints:

    n == nums.length
    1 <= n <= 104
    0 <= nums[i] <= n
    All the numbers of nums are unique
*/
******************************************************Approach::TC:O(n) nas SC:O(1) for Approach 1 &2 AND for Approach 3:: TC:O(n)and SC:O(n)*************************************************************************************************************
/*
 Class Solution {
public int missingNumber(int[] nums) 
{
    int res=nums.length;
    for(int i=0;i<nums.length;i++)
    {
    res= res^nums[i]^i ; 
    }
    return res;
}
    
} */   
//***********************************************************Approach2***********************************************************************************************************
 Class Solution {
    public int missingNumber(int[] nums)
    {
    int n=nums.length;
	Arrays.sort(nums);
	if(nums[0]!=0)
	{
		return 0;
	}
	if(nums[nums.length-1]!=nums.length)
	{
		return nums.length;
	}
	
	for(int i=1;i<nums.length;i++)
	{
		int expectednum=i;
		if(nums[i]!=expectednum)
		{
			return expectednum;
		}
	}
        return -1;
}
     
 }


//*****************************************Approach3**********************************************************************************************************************
Class Solution {
public int missingNumber(int[] nums)
{
/*Set<Integer> sset=new HashSet();
	 
for(int i:nums)
{
	sset.add(i);
}
 
for(int num=0;num<nums.length+1;num++)
{
	if(!sset.contains(num))
	{
		return num;
	}
}   
return -1;
 }       
    
} 
    }
}
