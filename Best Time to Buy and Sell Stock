/* Problem Description:: You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

Constraints:
    1 <= prices.length <= 105
    0 <= prices[i] <= 10
*/

/* //TC::O(N^2)
// SC:O(1)

class Solution {
    public int maxProfit(int[] prices) 
    {
        int maxprofit=0;
        for(int buyday=0;buyday<prices.length;buyday++)
        {
           for(int sellday=buyday+1;sellday<prices.length;sellday++) 
           {
               int currprofit=prices[sellday]-prices[buyday];
               if(currprofit>maxprofit)
               {
                  maxprofit= currprofit;
               }
           }
        }
        return maxprofit;
    }
}*/

//***************************************************************************************************************
//TC:O(N)
//SC:O(1)

class Solution {
    public int maxProfit(int[] prices) 
    {
        int cost=0;
        int min=prices[0];
        int maxProfit=0;
        for(int i=1;i<prices.length;i++)
        {
            cost=prices[i]-min; //min value should be updated as Math.min(prices[0] to prices[i-1])
            maxProfit=Math.max(maxProfit,cost);
            if(min>prices[i])
            {
                min=prices[i];
            }
            
        }
      return maxProfit;  
    }
}
