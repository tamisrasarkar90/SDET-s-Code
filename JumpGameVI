/*
Problem Description::
You are given a 0-indexed integer array nums and an integer k.You are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.
You want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array.
Return the maximum score you can get.
Example 1:
Input: nums = [1,-1,-2,4,-7,3], k = 2
Output: 7
Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.
Example 2:
Input: nums = [10,-5,-2,4,0,3], k = 3
Output: 17
Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.
Example 3:
Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
Output: 0
Constraints:
    1 <= nums.length, k <= 105
    -104 <= nums[i] <= 104
*/
class Solution {
    public int maxResult(int[] nums, int k) 
    {
        if(nums.length==0)
        {
            return 0;
        }
        // pq will hold values for score and index respectively.i.e for i/p=[1,-1,-2,4,-7,3] pq.offer(){(1,0),(-1,1),(-2,2),(4,3),(-7,4),(3,5)}
    PriorityQueue<int[]> pq=new PriorityQueue<int[]>((a,b)->(b[0]-a[0]));
      pq.offer(new int[]{nums[0],0});
       int maxScore=nums[0]; 
        for(int i=1;i<nums.length;i++)
        {
            while(!(i-pq.peek()[1]<=k)) //pq.peek()[0] ->value and pq.peek()[1] ->Index               
            {
                pq.poll();
            }
            int[] curr=pq.peek(); // which is containing the highest value;
            maxScore=curr[0]+nums[i]; 
            pq.offer(new int[]{maxScore,i});
        }
       return  maxScore;
    }
}

//TC::O(Nlogk) // as for loop for n times,then k times while loop for add into priority queue
//SC::O(k) //priorityQueue of size k
/* The intution behind the algorithm is:: we will create a priority queue with score and index values and sorted with score as higest priority. Now first wil insert the first element within the array into the Queue.
Now,each time will check the element from the array and pull the queue for the highest element as value and check the currentIndex - index[highestvalue withinQueue] is in the range of k i.e. <=k
    If yes,the will consider the value as to add with the highest within the queue and offer with the current index and       current value updated as highestvaluewithinqueue+currentvalue.
  If is not within k limitg then simple poll the queue or ignore that currentvalue while parsing the array.
At the end will return that highestvaluewithinqueue+currentvalue as a variable called maxscore.
*/
