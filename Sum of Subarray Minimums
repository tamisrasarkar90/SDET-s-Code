/*
Problem Description::
Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7. 

Example 1:
Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.

Example 2:
Input: arr = [11,81,94,43,3]
Output: 444
 
Constraints:
1 <= arr.length <= 3 * 104
1 <= arr[i] <= 3 * 104

*/

class Solution {
    public int sumSubarrayMins(int[] arr)
    {
        long sum=0;
        int n=arr.length;
        long MOD=1000000007;
        int[] ls=getNSL(arr, n);
        int[] rs= getNSR(arr,n);
       
        for(int i=0;i<arr.length;i++)
        {
             long d1=i-ls[i];
             long d2=rs[i]-i;
             long totalOccur=d1*d2;
             long element_Total=arr[i]*totalOccur;
             sum=(sum+element_Total)%MOD;       
        }
       
        return (int) sum;
    }

    private int[] getNSL(int[] nums,int n)
    {
        Stack<Integer> stack=new Stack();
        int[] lresult=new int[n];
        for(int i=0;i<nums.length;i++)
        {
            while(!stack.isEmpty() && nums[stack.peek()]>nums[i] )
            {
                stack.pop();
            }
        lresult[i]= stack.isEmpty() ? -1   : stack.peek() ;
        stack.push(i);
        }
        return lresult;
    }

    
    private int[] getNSR(int[] nums ,int n)
    {
        Stack<Integer> st=new Stack();
        
        int[] rresult=new int[n];
        for(int i=n-1;i>=0;i--)
        {
            while(!st.isEmpty() && nums[st.peek()]>=nums[i])
            {
                 st.pop();
            }
            rresult[i]= st.isEmpty()? n : st.peek() ;
              st.push(i);
            }
        return rresult;
    }
}

//TC:O(N)
//SC:O(N)
