/*
Problem Description:: Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.
A subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: arr = [1,2,3,4], difference = 1
Output: 4
Explanation: The longest arithmetic subsequence is [1,2,3,4].
Example 2:

Input: arr = [1,3,5,7], difference = 1
Output: 1
Explanation: The longest arithmetic subsequence is any single element.
Example 3:

Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2
Output: 4
Explanation: The longest arithmetic subsequence is [7,5,3,1].
 
Constraints:
1 <= arr.length <= 105
-104 <= arr[i], difference <= 104
*/

class Solution {
    public int longestSubsequence(int[] arr, int difference)
    {
        /*
    As per the dp's regulation  arr[i-1]+ difference=arr[i]
     */
    int max=1; //why coz one single element is also represent Arithmetic Progression
    Map<Integer,Integer> map=new HashMap();
    for(int i:arr)
    {
        int prev= map.getOrDefault(i-difference,0);  //[for current element will search for             currentelement-diffrence=prevelement in AP, if not found default value is 0]
        map.put(i,prev+1); 
        //[if suppose we found prevelement then whatever that value is add 1 to it] ,means suppose diff is 2 and currelemnet is 8 we found in map there is 6 as prevelement whose length is 1 now for 8 store 8 as key and value as 6'value i.e.1+1 i.e 2 so for 8 there is 2 length AP which is ending at 8'

     max=Math.max(max,prev+1);  //same update the maxlength such as prev it was length 1 now then legth is 2 hence 2>1 so update maxlength accordingly and return
    }
     return max;

    }

 }

//TC:O(n)
//SC:O(n)
