/*
Problem Statement:
Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

 

Example 1:

Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]
Explanation: The array ans is built as follows: 
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]
    = [0,1,2,4,5,3]
Example 2:

Input: nums = [5,0,1,2,3,4]
Output: [4,5,0,1,2,3]
Explanation: The array ans is built as follows:
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
    = [4,5,0,1,2,3]

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] < nums.length
The elements in nums are distinct.
 
*/
class Solution {
    public int[] buildArray(int[] nums) 
    {
        int n=nums.length;
        int[] newArr=new int[n];
        for(int i=0;i<n;i++)
        {
            newArr[i]=nums[nums[i]];
        }
        return newArr;
    }
}
//TC:O(N)
//SC:O(1)
//Approach 2: Constant Space complexity,without modifying the array
/* Intution is, to get old and new value simuntaneously, we can use the formula r+b*q=a where r is the reminder once divided with b and q is teh quitonet while dividing with b, like this if we need new num we can multiply with value b  then the reminder is our old number and result is out new number. This b can be anything that doesnot belongs to teh num array may be the limits exists or n

*/

class Solution {
    public int[] buildArray(int[] nums) 
    {
        int n=nums.length;
        // Update the original array with a=b*q+r where r=>a%b and q=>a/b are ld and new value in nums[i]    respectively
        for(int i=0;i<n;i++)
        {
            nums[i]=nums[i]+n*(nums[nums[i]]%n);
        }

        for(int i=0;i<n;i++)
        {
           nums[i]=nums[i]/n; 
        }
        return nums;
    }
}
//TC:O(N) SC:O(1)
