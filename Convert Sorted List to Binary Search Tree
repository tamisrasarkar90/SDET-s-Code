/*
Problem Description::
Given the head of a singly linked list where elements are sorted in ascending order, convert it to a 
height-balanced binary search tree.

Example 1:
Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.

Example 2:
Input: head = []
Output: []
 
Constraints:
The number of nodes in head is in the range [0, 2 * 104].
-105 <= Node.val <= 105

*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 /*
          if(nums.length==0)
        {
            return null;
        }
        return helper(nums,0,nums.length-1);   
    }
    private TreeNode helper(int[] nums,int low,int high)
    {
        if(low>high)
        {
            return null;
        }
        int mid=(high+low)/2;
        TreeNode root=new TreeNode(nums[mid]);
        root.left=helper(nums,low,mid-1);
        root.right=helper(nums,mid+1,high);
        return root;
    }

        */
class Solution {
    public TreeNode sortedListToBST(ListNode head) 
    {
        if(head==null)
        {
            return null;
        }
        return helper(head,null);
    }
    private TreeNode helper(ListNode start,ListNode end)
    {
      ListNode fast=start;
      ListNode slow=start;
      if(start==end)
      {
          return null;
      }
      while(fast!=end && fast.next!=end)
      {
          fast=fast.next.next;
          slow=slow.next;
      }
      TreeNode root=new TreeNode(slow.val); 
      //slow will indicate the center of the ListNode while fast completed 1 iteration
      root.left=helper(start,slow);
      root.right=helper(slow.next,end);
      return root;
      
    }
}
/*
Same intution as 108 Problem only here the array got trnasformed to list hence with fast and slow pointer will figure out the middle to the list then as usual the problem of 108
*/
