/* Problem Description::
You are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. You are given a 2D integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game.
A character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. More formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei.
Return the number of weak characters.

Example 1:
Input: properties = [[5,5],[6,3],[3,6]]
Output: 0
Explanation: No character has strictly greater attack and defense than the other.

Example 2:
Input: properties = [[2,2],[3,3]]
Output: 1
Explanation: The first character is weak because the second character has a strictly greater attack and defense.

Example 3:
Input: properties = [[1,5],[10,4],[4,3]]
Output: 1
Explanation: The third character is weak because the second character has a strictly greater attack and defense.

Constraints:
    2 <= properties.length <= 105
    properties[i].length == 2
    1 <= attacki, defensei <= 10
*/
//TC::O(NLogN)
SC:O(LogN)  //for using Array.sort


class Solution {
    public int numberOfWeakCharacters(int[][] properties) 
    {
        int resultcount=0;
        int mindefensesofar=0;
// if attacks values are same then based on decreasing value of defense we should sort the array else based on increasing value of attacks we should sort the array
      Arrays.sort(properties,(a,b)->a[0]==b[0]? b[1]-a[1]:a[0]-b[0]);
    //will start from last index
        for(int i=properties.length-1;i>=0;i--)
        {
           int arr[]= properties[i];
           int attack= arr[0];
           int defense=arr[1];
// If current defense is less than mindefensesofar that mean current element is a weak element as we are traversing from end hence currentattack value is definentily less than or equals to it's next now if defense is also less then this current element is a weaker while coparing with another pair already exists in the array which we already encounter
           if(defense<mindefensesofar)
           {
                resultcount++;
           }
           mindefensesofar=Math.max(mindefensesofar,defense);
        }
 
     return resultcount;   
    }
}
