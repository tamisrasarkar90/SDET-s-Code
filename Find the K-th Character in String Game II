/*
Problem Statement:
Alice and Bob are playing a game. Initially, Alice has a string word = "a".You are given a positive integer k. You are also given an integer array operations, where operations[i] represents the type of the ith operation.
Now Bob will ask Alice to perform all operations in sequence:
If operations[i] == 0, append a copy of word to itself.
If operations[i] == 1, generate a new string by changing each character in word to its next character in the English alphabet, and append it to the original word. For example, performing the operation on "c" generates "cd" and performing the operation on "zb" generates "zbac".
Return the value of the kth character in word after performing all the operations.Note that the character 'z' can be changed to 'a' in the second type of operation.

Example 1:
Input: k = 5, operations = [0,0,0]
Output: "a"
Explanation:
Initially, word == "a". Alice performs the three operations as follows:
Appends "a" to "a", word becomes "aa".
Appends "aa" to "aa", word becomes "aaaa".
Appends "aaaa" to "aaaa", word becomes "aaaaaaaa".

Example 2:
Input: k = 10, operations = [0,1,0,1]
Output: "b"
Explanation:
Initially, word == "a". Alice performs the four operations as follows:
Appends "a" to "a", word becomes "aa".
Appends "bb" to "aa", word becomes "aabb".
Appends "aabb" to "aabb", word becomes "aabbaabb".
Appends "bbccbbcc" to "aabbaabb", word becomes "aabbaabbbbccbbcc".
 

Constraints:
1 <= k <= 1014
1 <= operations.length <= 100
operations[i] is either 0 or 1.
The input is generated such that word has at least k characters after all operations.

*/
class Solution {
    //Approach2:
  //  The logic behind this approach is, once the string len >=k then, we need to find actually k-len/2 character in that(initial) String, if op=0 then that same char has copied only if op=1 then that char+1 is the result
    public char kthCharacter(long k, int[] operations) 
    {
        //Base Case
        if(k==1)
        {
            return 'a'; //Once k=1 then it will always be a because initially we have only a
        }
        long len=1 ; //This len is starting length of ourto be newly formed String which is initially a
        int op=0;
        long newk=k;
        for(int i=0;i<operations.length;i++)
        {
            len=len*2; //in each operation[be it 0/1] len is getting multipied by 2
            if(len>=k)
            {
                newk= k-len/2; //[Check the logic in above]
                op=operations[i];
                break;
            }
        }
        char c=kthCharacter(newk,operations);
        if(op==0)
        {
            return c;
        }
        return c=='z' ? 'a' : (char)(c+1);
    }
}
//TC:O(logk)
//SC:O(1)
        /*
        //Approach1: Time Limit Exceed as k value is large
        int i=0;
        int n=operations.length;
        String initial="a";
        String temp=new String(initial);
        while(temp.length()<k)
        {        
            StringBuilder st=new StringBuilder();
            while(i<n)
            {
                if(operations[i]=='0')
                {
                   st.append(temp);
                }
                else
                {
                    for(int j=0;j<temp.length();j++)
                    {
                        st.append((char)(temp.charAt(j)+1));
                    }                  
                }
                i++;
            }
            temp=st.toString();
        }
        return temp.charAt((int)(k-1));
    }
}*/
