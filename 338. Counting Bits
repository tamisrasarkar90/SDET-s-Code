/*
Problem Statement:: Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

 

Example 1:
Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Example 2:

Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
 

Constraints:
0 <= n <= 105
 
Follow up:
It is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?
Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)?
*/

class Solution {
    public int[] countBits(int n) 
    {
        int[] result=new int[n+1];
        result[0]=0;
        
        for(int i=1;i<=n;i++)
        {
            if(i%2==0)
            {
                result[i]=result[i/2];
            }
            else
            {
                result[i]=result[i-1]+1;
            }
            
        }
        return result;
    }
}

/*Explanation:: 0->0
              1->1
              2->1
             
    for 3 as odd no of 1s in 2 +1=no of 1s in 3
        so 3->11
        for 4 being even , no of 1s in 4=no of 1s in 2
            4->1
            for 5 being odd, no of 1s in 4 +1=no of 1s in 5
            5->2
                and so on
    */
                
    
