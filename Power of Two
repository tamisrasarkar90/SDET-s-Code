/* Problem Description:: Given an integer n, return true if it is a power of two. Otherwise, return false.
An integer n is a power of two, if there exists an integer x such that n == 2x.

Example 1:
Input: n = 1
Output: true
Explanation: 20 = 1

Example 2:
Input: n = 16
Output: true
Explanation: 24 = 16

Example 3:
Input: n = 3
Output: false


Constraints:
    -231 <= n <= 231 - 1
Follow up: Could you solve it without loops/recursion?

*/
/*class Solution {
    public boolean isPowerOfTwo(int n) 
    {
        if(n==1)
        {
            return true;
        }
        if(n==0)
        {
            return false;
        }
      
       while(n!=1)
       {
         if(n%2!=0)
         {
            return false;
         }
         n=n/2;
       }
       return true;
    }
}*/
//TC:O(log(n))
//SC:O(1)
/*Approach 2*/
/*class Solution {
    public boolean isPowerOfTwo(int n) 
    {
        if(n<1)
        {
            return false;
        }
        return (n&(n-1))==0;
    }
}*/
//TC:O(1)
//SC:O(1)
/*Approach 3*/
class Solution {
    public boolean isPowerOfTwo(int n) 
    {
        if(n<=0)
        {
            return false;
        }
    return Integer.bitCount(n)==1; //Integer.bitCount(int i)=> return how many set bits are there and if it is power of two then the number will always be 1
    }
}
//TC:O(log(n))
//SC:O(1)
