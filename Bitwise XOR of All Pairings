/*
Problem Description:
You are given two 0-indexed arrays, nums1 and nums2, consisting of non-negative integers. There exists another array, nums3, which contains the bitwise XOR of all pairings of integers between nums1 and nums2 (every integer in nums1 is paired with every integer in nums2 exactly once).

Return the bitwise XOR of all integers in nums3.

Example 1:

Input: nums1 = [2,1,3], nums2 = [10,2,5,0]
Output: 13
Explanation:
A possible nums3 array is [8,0,7,2,11,3,4,1,9,1,6,3].
The bitwise XOR of all these numbers is 13, so we return 13.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 0
Explanation:
All possible pairs of bitwise XORs are nums1[0] ^ nums2[0], nums1[0] ^ nums2[1], nums1[1] ^ nums2[0],
and nums1[1] ^ nums2[1].
Thus, one possible nums3 array is [2,5,1,6].
2 ^ 5 ^ 1 ^ 6 = 0, so we return 0.
 
Constraints:
1 <= nums1.length, nums2.length <= 105
0 <= nums1[i], nums2[j] <= 109


*/
class Solution {
    public int xorAllNums(int[] nums1, int[] nums2)
    {
        int m=nums1.length;
        int n=nums2.length;
        Map<Integer,Integer> map=new HashMap();
       // List<Integer> list=new ArrayList();
       int result=0;

        for(int i=0;i<m;i++)
        {
             int key1=nums1[i];                   
             map.put(key1,map.getOrDefault(key1,0)+n);
        }
        for(int j=0;j<n;j++)
        {
            int key2=nums2[j];
            map.put(key2,map.getOrDefault(key2,0)+m);
        }

        for(int key:map.keySet())
        {
            if(map.get(key)%2!=0)
            {
               result=result^key;
            }
        }
       return result;
    }
}
//TC:O(N)
//SC:O(N)
*/
/*
The concept is, A^A is zero as both nums1 and nums2 will pair it for each element atleast one so all the elements in nums1 will appear atleast n times where n=nums2.length ,similarly nums2 elelment will appear atleast m times,
where m=nums1.length, hence if we get the occurance of each element, only odd one will stay rest we can eleminate.

*/

//**************************************************2nd Approach ***********************************************************************************

 int m=nums1.length;
   int n=nums2.length;
   int res=0;
   if(m%2!=0)   //if m is odd then nums2 element will only exists as nums2 element will appear for m times
   {
       for(int num:nums2)
       {
         res^=num;
       }
   }
   if(n%2!=0)         //if n is odd then nums1 element will only exists as nums1 element will appear for n times
   {
     for(int num:nums1)
       {
         res^=num;
       }
   }
   
    return res;

    }
}
//TC:O(N)
//SC:O(1)
