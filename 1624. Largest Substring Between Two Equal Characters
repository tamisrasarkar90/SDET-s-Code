/*
Problem Description::
Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.

A substring is a contiguous sequence of characters within a string.
 
Example 1:

Input: s = "aa"
Output: 0
Explanation: The optimal substring here is an empty substring between the two 'a's.

Example 2:
Input: s = "abca"
Output: 2
Explanation: The optimal substring here is "bc".

Example 3:
Input: s = "cbzxy"
Output: -1
Explanation: There are no characters that appear twice in s.
 
Constraints:
1 <= s.length <= 300
s contains only lowercase English letters.

*/
class Solution {
    public int maxLengthBetweenEqualCharacters(String s) 
    {
       Map<Character,Integer> map=new HashMap();
       int maxLength=-1;
       for(int i=0;i<s.length();i++)
       {          
          if(map.containsKey(s.charAt(i)))
          {
              int index=map.get(s.charAt(i));
              maxLength=Math.max(i-index-1,maxLength);
          } 
          else
          {
              map.put(s.charAt(i),i);    
          }
         
       }
      return maxLength;
    }
}

//TC:O(N)
//SC:O(1)
