/*
Problem Statement:
Given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs.

A pair (i, j) is fair if:

0 <= i < j < n, and
lower <= nums[i] + nums[j] <= upper
 
Example 1:

Input: nums = [0,1,7,4,4,5], lower = 3, upper = 6
Output: 6
Explanation: There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).
Example 2:

Input: nums = [1,7,9,2,5], lower = 11, upper = 11
Output: 1
Explanation: There is a single fair pair: (2,3).
 
Constraints:
1 <= nums.length <= 105
nums.length == n
-109 <= nums[i] <= 109
-109 <= lower <= upper <= 109
*/
class Solution {
    public long countFairPairs(int[] nums, int lower, int upper) 
    {
        /*
        //Approach 1: TLE
        int n=nums.length;
        int count=0;
        for(int i=0;i<n;i++)
        {
             for(int j=i+1;j<n;j++)
             {
                int sum=nums[i]+nums[j];
                if(sum>=lower && sum<=upper)
                {
                    count++;
                }
             }
        }
        return count;
    }
}*/
        //Approach :2

        Arrays.sort(nums);
        int n=nums.length;
        long result=0;
        for(int i=0;i<n;i++)
        {           
            //return Index of number less than lower-nums[i]
            int lowerIndex= getLowerIndex(nums,i+1,n,lower-nums[i]);
            //Count of Numbers less than lower Bound
            int x= lowerIndex-1-i;

            //return Index of number less than or equals to upper-nums[i]
            int upperIndex= getUpperIndex(nums,i+1,n,upper-nums[i]);
            //Count of Numbers less than or equals to upper Bound
            int y=upperIndex-1-i;

            //result is y-x which is exactly within lower to upper bound range
            result+=y-x;
        }

        return result;
    }
    private static int getLowerIndex(int[] nums,int start, int end, int target)
    {
      while(start<end){
      int mid=start+(end-start)/2;
      if(nums[mid]<target)
      {
          start=mid+1;
      }
      else
      {
        end=mid;
      }
    }
      return start;
    }
    private static int getUpperIndex(int[] nums,int start, int end, int target)
    {
      while(start<end){
      int mid=start+(end-start)/2;
      if(nums[mid]<=target)
      {
          start=mid+1;
      }
      else
      {
        end=mid;
      }
    }
      return start;
    }
}
/*
[1,2,5,7,9] l=11.u=11
[0,1,4,4,5,7]

*/

//TC:O(NLogN)
