/* Problem Statement:: Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.
We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).
Example 1:
Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.

Example 2:
Input: nums = [4,2,1]
Output: false
Explanation: You can't get a non-decreasing array by modify at most one element.

Constraints:
    n == nums.length
    1 <= n <= 104
    -105 <= nums[i] <= 105
*/
// TC:: O(n) and SC:O(1)
//*************************************************************************************************************************************************************
class Solution {
    public boolean checkPossibility(int[] nums) 
    {
        
        int count=0;
        for(int i=1;i<nums.length;i++)
        {
            if(nums[i-1]>nums[i])
            {
                count++;
            
            if(i>=2 && nums[i-2]>nums[i])
            {
                nums[i]=nums[i-1];
            }
            else
            {
                nums[i-1]=nums[i];
            }
          }
        }
 // example:: 2,4,1 :: Case1:: i=2 here & to make array non decreasing nums[i] will get updated //with the value of nums[i-1]
 //else, for case 2:: 1,4,2 the nums[i-1] will get update with nums[i] where i =2 as to make //array non decresing
// Case 3:: 2,1 nums[i-1] will get updated with the value of nums[i] in order to amke array non decreasing
            
    return count>1 ? false : true;
    }
}
