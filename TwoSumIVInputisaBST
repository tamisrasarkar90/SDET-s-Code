/*Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.
Example 1:
Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

Example 2:
Input: root = [5,3,6,2,4,null,7], k = 28
Output: false

Constraints:
    The number of nodes in the tree is in the range [1, 104].
    -104 <= Node.val <= 104
    root is guaranteed to be a valid binary search tree.
    -105 <= k <= 105
*/
//********************************************TC::O(n) & SC:: O(n)****************************************************************************************************
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean findTarget(TreeNode root, int k) 
    {
        List<Integer> list =new ArrayList<Integer>();
        if(root==null)
        {
            return false;
        }
        inorder(root,list);
        int i=0;
        int j=list.size()-1;
        while(j>i)
        {
            if(list.get(i)+list.get(j)==k)
            {
                return true;
            }
            else if(k>list.get(i)+list.get(j))
            {
                i++;
            }
            else if(k<list.get(i)+list.get(j))
            {
                j--;
            }
        }
        return false;
    }
  public static void inorder(TreeNode root,List<Integer> list)
        {    
            if(root==null)
            {
                return ;
            }
                inorder(root.left,list);
                list.add(root.val);
                inorder(root.right,list);            
        }
}
//************************************************************************* Using Set:: TC::O(n) & SC::O(n) *************************************************************
/* Approach:: Will visit the tree by Preeorder,first calculate target-root if it is not there in the set then add root to the set and visit it's left and right child accordingly. But 
if target-root is there in the set will return true.
*/

class Solution {
    public boolean findTarget(TreeNode root, int k) 
    {
       Set<Integer> set=new HashSet<Integer>();       
       return preorder(root,k,set); 
    }
    
    public static boolean preorder(TreeNode root, int k,Set<Integer> set)
    {
        if(root==null)
        {
            return false;
        }
        int complement=k-root.val;
        if(set.contains(complement))
        {
            return true;
        }
        else
        {
            set.add(root.val);
        }
        return preorder(root.left,k,set)|| preorder(root.right,k,set);
    }
}


