/*
Problem Description::
An array arr a mountain if the following properties hold:  arr.length >= 3
    There exists some i with 0 < i < arr.length - 1 such that:
        arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
        arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].You must solve it in O(log(arr.length)) time complexity.
Example 1:
Input: arr = [0,1,0]
Output: 1

Example 2:
Input: arr = [0,2,1,0]
Output: 1

Example 3:
Input: arr = [0,10,5,2]
Output: 1


Constraints:
    3 <= arr.length <= 105
    0 <= arr[i] <= 106
    arr is guaranteed to be a mountain array.
*/
//TC::O(logN) and SC::O(1)
//Approach:: Binary Search
/* There are two scope to consider.One is ascending order then reach peak(max i.e. the o/p),then decending order. Hence will look for mid first. 
If arr[mid]>arr[mid+1] then we are in decending part of moutain array.Then arr[mid] can be a possible answer hence high=arr[mid] and search for another bigger(max) number in the left side of teh array.
Similarly,when arr[mid]<arr[mid+1] that means we are in increasing /ascending part of array then the answer may lie from mid+1 to right side.
AS max we need to return hence will not consider arr[mid] as arr[mid+1]>arr[mid] hence set low=mid+1; and once you reach the peak i.e. high=low=maxitem then 
return any one high/low
*/
class Solution {
    public int peakIndexInMountainArray(int[] arr) 
    {
        int low=0;
        int high=arr.length-1;       
        while(high>low)
        {
            int mid=low+(high-low)/2;
            if(arr[mid]>arr[mid+1]) //decending part of array
            {
                high=mid;
            }
            else
            {
                low=mid+1;  //ascending part of array
            }
        }
        return low;  //Or can return high too!        
    }
}
