Problem Description::
Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.
Example 1:
Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]

Example 2:
Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]

Example 3:
Input: temperatures = [30,60,90]
Output: [1,1,0]
*************************************************Approach1:: Time complexity::O(N^2) and space::O(1) **********************************************
class Solution {
    public int[] dailyTemperatures(int[] temperatures) 
    {
        int[] result=new int[temperatures.length];
        for(int i=0;i<temperatures.length;i++)
        {
            for(int j=i+1;j<temperatures.length;j++)
            {
            if(temperatures[i]<temperatures[j])
            {
                result[i]=j-i; 
                break;
            }
        }
        }
        
        return result;
    }
} 

*************************************************Approach2:: Time complexity::O(n) and space::O(n) **********************************************
class Solution {
    public int[] dailyTemperatures(int[] temperatures) 
    {
        Stack<Integer> stack=new Stack();
        int[] result=new int[temperatures.length];
        for(int i=0;i<temperatures.length;i++)
        {
            while(!stack.isEmpty() && temperatures[stack.peek()]<temperatures[i] )
            {
                int topIndex=stack.pop();
                int diff= i-topIndex;
                result[topIndex] =diff;
            }
            stack.push(i);
        }
       while(!stack.isEmpty())
        {
           int topIndex=stack.pop();
            result[topIndex] =0;
        }
        return result;
    }
}
