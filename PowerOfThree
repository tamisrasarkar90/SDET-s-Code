/* Problem Statement::
Given an integer n, return true if it is a power of three. Otherwise, return false.An integer n is a power of three, if there exists an integer x such that n == 3x.

Example 1:
Input: n = 27
Output: true

Example 2:
Input: n = 0
Output: false

Example 3:
Input: n = 9
Output: true

Constraints:
    -231 <= n <= 231 - 1
Follow up: Could you solve it without loops/recursion?
*/
class Solution {
    public boolean isPowerOfThree(int n) 
    {
        if(n==0)
        {
            return false;
        }
        while(n!=1)
        {
            if(n%3!=0)
            {
                return false;
            }
            n=n/3;
        }
        return true;
    }
}
//TC:O(N)
//SC:O(1)
//*************************************Approach2::
/*class Solution {
    public boolean isPowerOfThree(int n) 
    {
        if(n==0)
        {
            return false;
        }
     // 4^x=input => log4(input)=x   =>   log(input)/log4=x =>hence if LHS is a complete number than anything like decimal/fractorial return false;
        return Math.log(n)/Math.log(3)%1==0;
    }
}*/
