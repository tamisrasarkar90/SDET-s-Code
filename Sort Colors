/*
Problem Statement:
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.


Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?
*/
class Solution {
    public void sortColors(int[] nums) 
    {
        //Approach 1:TC:O(N^2)
       /* int n=nums.length;
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(nums[i]>nums[j])
                {
                    int temp=nums[i];
                    nums[i]=nums[j];
                    nums[j]=temp;
                }
            }
        }*/
        //Approach: 2
       int n=nums.length;
       int i=0;
       int j=0;
       int k=n-1;
       while(j<=k)
       {
        if(nums[j]==1)
        {
            j++;
        }
        else if(nums[j]==2)
        {
            int temp=nums[j];
            nums[j]=nums[k];
            nums[k]=temp;
            k--;
        }
        else
        {
            //j==0
            int temp1=nums[i];
            nums[i]=nums[j];
            nums[j]=temp1;
            i++;
            j++;
        }
       }
    }
        
}
//TC:O(N)
*/
