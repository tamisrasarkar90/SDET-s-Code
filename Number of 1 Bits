Problem Description:: Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).
Note:
    Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
    In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3. 

Example 1:
Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.

Example 2:
Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.

Example 3:
Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.

Constraints:
    The input must be a binary string of length 32. 
Follow up: If this function is called many times, how would you optimize it?
*****************************************************************************************************************************************************************
public class Solution {
    // you need to treat n as an unsigned value
    //Here the concept is, when perform AND to one number and Number-1 it will always loose one sign bit from right!
    //Untill the AND result becomes zero will perform that.The total number of opertaions required to perform a number to zero is what the result is! that means no of sign bit.
    public int hammingWeight(int n) 
    {
        int count=0;
        while(n!=0)
        {
            n=(n&n-1);  //Untill return zero
            count++;
        }
        return count;
    }

//******************************************TC:O(~32)i.e :TC::O(1)********************************
public int hammingWeight(int n) 
    {
    //The concept here is we are taking a 32 bit integer array to store the input. we are taking right most bit,if it is 1 then count++;and right shift to it's left.Again if it is 1 then count will increment else if 0 will ignore and move forward to left.At the end will return count. */
    
        int count=0;
        for(int i=0;i<32;i++)
        {
          if(((n>>i)&1)==1)    //to take right most digit we need to do like (n>>i)&1
          {
              count++;
          }
        }
        return count;
    }
}
