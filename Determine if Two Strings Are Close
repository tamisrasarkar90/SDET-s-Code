/*
Problem Statement::
Two strings are considered close if you can attain one from the other using the following operations:

    Operation 1: Swap any two existing characters.
        For example, abcde -> aecdb
    Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
        For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)

You can use the operations on either string as many times as necessary.

Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.

Example 1:
Input: word1 = "abc", word2 = "bca"
Output: true
Explanation: You can attain word2 from word1 in 2 operations.
Apply Operation 1: "abc" -> "acb"
Apply Operation 1: "acb" -> "bca"

Example 2:
Input: word1 = "a", word2 = "aa"
Output: false
Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.

Example 3:
Input: word1 = "cabbba", word2 = "abbccc"
Output: true
Explanation: You can attain word2 from word1 in 3 operations.
Apply Operation 1: "cabbba" -> "caabbb"
Apply Operation 2: "caabbb" -> "baaccc"
Apply Operation 2: "baaccc" -> "abbccc"


Constraints:
    1 <= word1.length, word2.length <= 105
    word1 and word2 containÂ only lowercase English letters.
*/

//********************************************TC::O(N) (for sorting extra NlogN)~26 hence O(1) & SC::O(2N+2N)[as two hHshmap and 2 list used,but both for size 26]~O(1)**************************************************************
//TC:O(N)
//SC:O(1)
class Solution {
    public boolean closeStrings(String word1, String word2)
    {
        // There are three conditions to check::
/*
  1. Both the string needs to same in length=> In order to return true;
  2. Both the strings needs to have same characters within if not frequency of the characters and orders are same!
  Like if String 1=aabbbbcg
  String2=abcgg
  return true ; as both have a,b,c &g but might not character frequency is same
  but if String 1=aabbbbcg
  String2=abcgguh the return false as STring1 has not u,h hence not possible to convert 
 3. The occurance of each character might be same as any other characters occurance in another STring in order to return true;
 example:: word1: aabbbbcg here a=>2,b=>3,c=>1,g=>1(hence 2,3,1,1)
 word2: abcgg here,a=>1,b=>1,c=>1,g=>2(1,1,1,2) => not much hence false;there should be two times 1,One times 2 & One time 3 but in second String there is no One times 3 hence false
*/
        
  if(word1.length()!=word2.length())
  {
      return false;
  }
 Map<Character,Integer>  map1=new HashMap(); 
 Map<Character,Integer>  map2=new HashMap();     
        
    for(char c:word1.toCharArray())
    {
        map1.put(c,map1.getOrDefault(c,0)+1);
    }
        
     for(char ch:word2.toCharArray())
    {
        map2.put(ch,map2.getOrDefault(ch,0)+1);
    }   
        
       if(!map1.keySet().equals(map2.keySet()))//in order to check condition 2 of same characters(not necessarily frequency) exists in both of the Strings.
       {
           return false;
       }
        // In order to check condition 3,we create list of having values of occurance of characters
       List<Integer> list1=new ArrayList(map1.values()); 
       List<Integer> list2=new ArrayList(map2.values()); 
    
    //Sorting to get to know if both having same no of occuranace of characters
     Collections.sort(list1);
     Collections.sort(list2);
        
      if(list1.equals(list2))
      {
          return true;
      }
        return false;
    }
}
