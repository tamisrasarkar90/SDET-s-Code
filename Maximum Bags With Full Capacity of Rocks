Problem Description::
You have n bags numbered from 0 to n - 1. You are given two 0-indexed integer arrays capacity and rocks. The ith bag can hold a maximum of capacity[i] rocks and currently contains rocks[i] rocks. You are also given an integer additionalRocks, the number of additional rocks you can place in any of the bags.
Return the maximum number of bags that could have full capacity after placing the additional rocks in some bags.

Example 1:
Input: capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2
Output: 3
Explanation:
Place 1 rock in bag 0 and 1 rock in bag 1.
The number of rocks in each bag are now [2,3,4,4].
Bags 0, 1, and 2 have full capacity.
There are 3 bags at full capacity, so we return 3.
It can be shown that it is not possible to have more than 3 bags at full capacity.
Note that there may be other ways of placing the rocks that result in an answer of 3.

Example 2:
Input: capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100
Output: 3
Explanation:
Place 8 rocks in bag 0 and 2 rocks in bag 2.
The number of rocks in each bag are now [10,2,2].
Bags 0, 1, and 2 have full capacity.
There are 3 bags at full capacity, so we return 3.
It can be shown that it is not possible to have more than 3 bags at full capacity.
Note that we did not use all of the additional rocks.

Constraints:
    n == capacity.length == rocks.length
    1 <= n <= 5 * 104
    1 <= capacity[i] <= 109
    0 <= rocks[i] <= capacity[i]
    1 <= additionalRocks <= 109
    *******************************************************************************************************************************************************************
    class Solution {
    public int maximumBags(int[] capacity, int[] rocks, int additionalRocks) 
    {
        int count=0;
       ArrayList<Integer> list=new ArrayList();
        for(int i=0;i<capacity.length;i++)
        {
            list.add(capacity[i]-rocks[i]);
        }
        Collections.sort(list);
        int ans=0;
        for(int j:list)
        {          
           count+=j;          
        if(additionalRocks<count)
        {                   
            break;
        }
            ans++;
        }
        return ans;
    }
}

/***************************************************************Another Approach************************************************************************
class Solution {
    public int maximumBags(int[] capacity, int[] rocks, int additionalRocks) 
    {
       int  n = capacity.length;
       n = rocks.length;
       int maxcapacity=0;
       List<Integer> listdiff=new ArrayList();
/*
First I will get the differenece between rocks and capacity,and get another array or List. Now if this newly array/list,first needs to sort inorder to get what are the numbers of elements we can make it as full capacity.Strating from sorted list/array from 0 index,if it contains 0 in any place that menas it is in full capacity and maxcapacity and increase to one,if not, then I will check if additionalrocks is more than zero,then I will deduct the value in newly created list/array  on that index while traversing,from addition rocks,in order to make the element of that newly array/list in full capacity and increase maxcapacity by one,Untill additionalrocks==0,then it will break the loops and  I will return maxcapacity
*/

        for(int i=0;i<n;i++)
        {
            int diff=0;
            diff=capacity[i]-rocks[i];
            listdiff.add(diff);
        }
        Collections.sort(listdiff);
        for(int j=0;j<listdiff.size();j++)
        {
            if(listdiff.get(j)==0)
            {
                maxcapacity++;
            }
            else{
            int val= listdiff.get(j);
           if(val<=additionalRocks)
           {
              maxcapacity++;
              additionalRocks =additionalRocks-val;            
           }
           else
           {
               break;
           }

            }         
        }
        return maxcapacity;
    }
}
//TC:O(N+NLogN)~O(2N)~O(N)
//SC:O(N) //for extra array /list
