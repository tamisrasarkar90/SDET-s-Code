/*
Problem Description:
There is a game dungeon comprised of n x n rooms arranged in a grid.

You are given a 2D array fruits of size n x n, where fruits[i][j] represents the number of fruits in the room (i, j). Three children will play in the game dungeon, with initial positions at the corner rooms (0, 0), (0, n - 1), and (n - 1, 0).

The children will make exactly n - 1 moves according to the following rules to reach the room (n - 1, n - 1):

The child starting from (0, 0) must move from their current room (i, j) to one of the rooms (i + 1, j + 1), (i + 1, j), and (i, j + 1) if the target room exists.
The child starting from (0, n - 1) must move from their current room (i, j) to one of the rooms (i + 1, j - 1), (i + 1, j), and (i + 1, j + 1) if the target room exists.
The child starting from (n - 1, 0) must move from their current room (i, j) to one of the rooms (i - 1, j + 1), (i, j + 1), and (i + 1, j + 1) if the target room exists.
When a child enters a room, they will collect all the fruits there. If two or more children enter the same room, only one child will collect the fruits, and the room will be emptied after they leave.Return the maximum number of fruits the children can collect from the dungeon.
Example 1:
Input: fruits = [[1,2,3,4],[5,6,8,7],[9,10,11,12],[13,14,15,16]]
Output: 100
Explanation:

In this example:
The 1st child (green) moves on the path (0,0) -> (1,1) -> (2,2) -> (3, 3).
The 2nd child (red) moves on the path (0,3) -> (1,2) -> (2,3) -> (3, 3).
The 3rd child (blue) moves on the path (3,0) -> (3,1) -> (3,2) -> (3, 3).
In total they collect 1 + 6 + 11 + 16 + 4 + 8 + 12 + 13 + 14 + 15 = 100 fruits.

Example 2:
Input: fruits = [[1,1],[1,1]]
Output: 4
Explanation:

In this example:
The 1st child moves on the path (0,0) -> (1,1).
The 2nd child moves on the path (0,1) -> (1,1).
The 3rd child moves on the path (1,0) -> (1,1).
In total they collect 1 + 1 + 1 + 1 = 4 fruits.


Constraints:
2 <= n == fruits.length == fruits[i].length <= 1000
0 <= fruits[i][j] <= 1000
*/
//Approach1: Recursion: TLE
class Solution {
    public int maxCollectedFruits(int[][] f) 
    {
        int n=f.length;
        /*
        Approach 1: Use recursion, for child 1: Only move is diagonal as the total moves=n-1 for child 2 only move is uper side of diagonal and for 3rd child lower side of diagonal, for 2&3 child we need to consider max fruits on the path to reach (0,0)->(n-1,n-1)
        */
        int totalF=0;
        int ans=0;
        //This is for 1st child
        for(int i=0;i<n;i++)
        {
             ans+=f[i][i];            
        }
        //Second child
        int secondChild=solveForSecondChild(0,n-1,f);
        int thirdChild=solveForThirdChild(n-1,0,f);
        return ans+secondChild+thirdChild;
    }
    private static int solveForSecondChild(int i, int j,int[][] f)
    {
        //for 2nd child
        //Base condition
         int n=f.length;
        if(i<0||i>=n ||j>=n ||j<0)
        {
            return 0;
        }
        if(i==n-1 && j==n-1)
        {
            return 0; //as the fruits already taken by child1
        }
        if(i==j ||i>j)
        {
            return 0; //coz i==j is diagonalfruits which is already taken by Child1 and the upeer half of the diagonal always be i<j else it will come to lower half which is a constraints on 2nd child move according to the prob statement
        }
        int maxF=0;
       
       // if((i + 1, j - 1), (i + 1, j), and (i + 1, j + 1)
       
          int bottomLeft=f[i][j]+solveForSecondChild(i+1,j-1,f); //current cell fruits + dir wise
          int bottomRight=f[i][j]+solveForSecondChild(i+1,j+1,f); 
          int bottom=f[i][j]+solveForSecondChild(i+1,j,f); 
        //  maxF=Math.max(bottomLeft,bottomRight);
         // maxF=Math.max(bottom,maxF);       
       return Math.max(bottomLeft,Math.max(bottomRight,bottom));
    } 
     private static int solveForThirdChild(int i, int j,int[][] f)
    {
      //for 3rd child
        //Base condition
         int n=f.length;
        if(i<0||i>=n ||j>=n ||j<0)
        {
            return 0;
        }
        if(i==n-1 && j==n-1)
        {
            return 0; //as teh fruits already taken by child1
        }
         if(i==j ||i<j)
        {
            return 0; //coz i==j is diagonalfruits which is already taken by Child1 and the lower half of the diagonal always be i>j else it will come to upper half which is a constraints on 3rd child move according to the prob statement
        }
        int maxF=0;
       
       // if((i + 1, j - 1), (i + 1, j), and (i + 1, j + 1)
       
          int upRight=f[i][j]+solveForThirdChild(i-1,j+1,f); //current cell fruits + dir wise
          int rightCell=f[i][j]+solveForThirdChild(i,j+1,f); 
          int diagonalCell=f[i][j]+solveForThirdChild(i+1,j+1,f); 
         // maxF=Math.max(upRight,rightCell);
         // maxF=Math.max(diagonalCell,maxF);       
       return Math.max(upRight,Math.max(rightCell,diagonalCell));
    } 
}
//Approach 2: Top Down: TC:O(N^2) SC:O(N^2)
class Solution {
     /*
        Approach 1: Use recursion, for child 1: Only move is diagonal as the total moves=n-1 for child 2 only move is uper side of diagonal and for 3rd child lower side of diagonal, for 2&3 child we need to consider max fruits on the path to reach (0,0)->(n-1,n-1)
        */
    int[][] dp;
    public int maxCollectedFruits(int[][] f) 
    {
        int n=f.length;  
        dp=new int[n][n];   
        int totalF=0;
        int ans=0;
        for(int[] d:dp)
        {
          Arrays.fill(d,-1);
        }
        //This is for 1st child
        for(int i=0;i<n;i++)
        {
             ans+=f[i][i];  
             f[i][i]=0;
             dp[i][i]=0;         
        }
        //Second child
        int secondChild=solveForSecondChild(0,n-1,f);
        int thirdChild=solveForThirdChild(n-1,0,f);
        return ans+secondChild+thirdChild;
    }
    private int solveForSecondChild(int i, int j,int[][] f)
    {
        //for 2nd child
        //Base condition
         int n=f.length;
        if(i<0||i>=n ||j>=n ||j<0)
        {
            return 0;
        }
        if(i==n-1 && j==n-1)
        {
            return 0; //as the fruits already taken by child1
        }
        if(i==j ||i>j)
        {
            return 0; //coz i==j is diagonalfruits which is already taken by Child1 and the upeer half of the diagonal always be i<j else it will come to lower half which is a constraints on 2nd child move according to the prob statement
        }
        if(dp[i][j]!=-1)
        {
           return dp[i][j];
        }
        int maxF=0;
       
       // if((i + 1, j - 1), (i + 1, j), and (i + 1, j + 1)
       
          int bottomLeft=f[i][j]+solveForSecondChild(i+1,j-1,f); //current cell fruits + dir wise
          int bottomRight=f[i][j]+solveForSecondChild(i+1,j+1,f); 
          int bottom=f[i][j]+solveForSecondChild(i+1,j,f); 
        //  maxF=Math.max(bottomLeft,bottomRight);
         // maxF=Math.max(bottom,maxF);       
       return dp[i][j]=Math.max(bottomLeft,Math.max(bottomRight,bottom));
    } 
     private int solveForThirdChild(int i, int j,int[][] f)
    {
      //for 3rd child
        //Base condition
         int n=f.length;
        if(i<0||i>=n ||j>=n ||j<0)
        {
            return 0;
        }
        if(i==n-1 && j==n-1)
        {
            return 0; //as teh fruits already taken by child1
        }
         if(i==j ||i<j)
        {
            return 0; //coz i==j is diagonalfruits which is already taken by Child1 and the lower half of the diagonal always be i>j else it will come to upper half which is a constraints on 3rd child move according to the prob statement
        }
        if(dp[i][j]!=-1)
        {
           return dp[i][j];
        }
        int maxF=0;
       
       // if((i + 1, j - 1), (i + 1, j), and (i + 1, j + 1)
       
          int upRight=f[i][j]+solveForThirdChild(i-1,j+1,f); //current cell fruits + dir wise
          int rightCell=f[i][j]+solveForThirdChild(i,j+1,f); 
          int diagonalCell=f[i][j]+solveForThirdChild(i+1,j+1,f); 
         // maxF=Math.max(upRight,rightCell);
         // maxF=Math.max(diagonalCell,maxF);       
       return dp[i][j]=Math.max(upRight,Math.max(rightCell,diagonalCell));
    } 
}



*/
