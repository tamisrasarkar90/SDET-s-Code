/*
Problem Statement:: You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.
Two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.
Return true if a and b are alike. Otherwise, return false.

Example 1:
Input: s = "book"
Output: true
Explanation: a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. Therefore, they are alike.

Example 2:
Input: s = "textbook"
Output: false
Explanation: a = "text" and b = "book". a has 1 vowel whereas b has 2. Therefore, they are not alike.
Notice that the vowel o is counted twice.

Constraints:
    2 <= s.length <= 1000
    s.length is even.
    s consists of uppercase and lowercase letters.

*/
class Solution {
    public boolean halvesAreAlike(String s) 
    {
         s=s.toLowerCase();
        int len=s.length();
        int halflen=len/2;
        StringBuilder firsthalf=new StringBuilder();
        StringBuilder secondhalf=new StringBuilder();
        for(int i=0;i<halflen;i++)
        {
            if((s.charAt(i)=='a')||(s.charAt(i)=='e')||(s.charAt(i)=='i')||(s.charAt(i)=='o')||(s.charAt(i)=='u'))
            {
                firsthalf.append(s.charAt(i));
            }           
        }
        for(int j=halflen;j<len;j++)
        {
        if((s.charAt(j)=='a')||(s.charAt(j)=='e')||(s.charAt(j)=='i')||(s.charAt(j)=='o')||(s.charAt(j)=='u'))
           {
            secondhalf.append(s.charAt(j));
        }
        }
        
      return   firsthalf.length()==secondhalf.length();
    }
}
//TC::O(N)
//SC:O(N)
