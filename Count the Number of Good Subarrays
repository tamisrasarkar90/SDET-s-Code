/*
Problem Description:
Given an integer array nums and an integer k, return the number of good subarrays of nums.

A subarray arr is good if there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].

A subarray is a contiguous non-empty sequence of elements within an array.


Example 1:
Input: nums = [1,1,1,1,1], k = 10
Output: 1
Explanation: The only good subarray is the array nums itself.

Example 2:
Input: nums = [3,1,4,3,2,2,4], k = 2
Output: 4
Explanation: There are 4 different good subarrays:
- [3,1,4,3,2,2] that has 2 pairs.
- [3,1,4,3,2,2,4] that has 3 pairs.
- [1,4,3,2,2,4] that has 2 pairs.
- [4,3,2,2,4] that has 2 pairs.
 
Constraints:
1 <= nums.length <= 105
1 <= nums[i], k <= 109

*/
class Solution {
    public long countGood(int[] nums, int k) 
    {
        Map<Integer,Integer> map=new HashMap();
        /*for(int num:nums)
        {
            map.put(num,map.getOrDefault(num,0)+1);
        }*/
        int i=0;
        int j=i;
        int n=nums.length;
        long pair=0;
        long result=0;
        while(j<n)
        {
            pair += map.getOrDefault(nums[j], 0);
            map.put(nums[j], map.getOrDefault(nums[j], 0) + 1);
            while(pair>=k)
            {
                result+=(n-j); //(n-j means as we get one valid pair with rest of the element it will create valid subarray of (n-j number) )
                //window shrink
                
                map.put(nums[i],map.get(nums[i])-1);              
                pair-=map.get(nums[i]);
                i++;
            }
            j++;
        }
        return result;
    }
}
//TC:O(N)
//SC:O(N)

/*
The concept is Sliding window :: Where a j pointer is moving checking if i<j nums[i]==nums[j] and keep the count in map,if a key already exist,then increment the pairCount as with current oen it will create a pair now if noOfPair=k then ,add to the result and decrement the map frequency as well as deduct from val of map


*/
