/*
Problem Statement: You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).
It starts raining, and water gradually rises over time. At time t, the water level is t, meaning any cell with elevation less than equal to t is submerged or reachable.You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.
Return the minimum time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).
Example 1:
Input: grid = [[0,2],[1,3]]
Output: 3
Explanation:
At time 0, you are in grid location (0, 0).
You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.
You cannot reach point (1, 1) until time 3.
When the depth of water is 3, we can swim anywhere inside the grid.
Example 2:
Input: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
Output: 16
Explanation: The final route is shown.
We need to wait until time 16 so that (0, 0) and (4, 4) are connected.
 
Constraints:
n == grid.length
n == grid[i].length
1 <= n <= 50
0 <= grid[i][j] < n2
Each value grid[i][j] is unique.
*/
class Solution {
    public int swimInWater(int[][] grid) 
    {
        int n=grid.length;
        int maxElevation=0;
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[0]-b[0]); //sort in descenading order
        boolean[][] visited=new boolean[n][n];
        int[][] dir={{0,-1},{0,1},{1,0},{-1,0}};
        pq.offer(new int[]{grid[0][0],0,0});       
        visited[0][0]=true;
        while(!pq.isEmpty())
        {
           int[] curr=pq.poll();
           int cellVal=curr[0];
           int rowVal=curr[1];
           int colVal=curr[2];
           maxElevation=Math.max(maxElevation,cellVal);
           if(rowVal==n-1 && colVal==n-1 )
           {
            return maxElevation;
           }
          for(int[] d:dir)
          {
            int newRowVal=rowVal+d[0];
            int newColVal=colVal+d[1];
           
            //boundray check
            if(newRowVal>=0 && newRowVal<n && newColVal>=0 && newColVal<n && !visited[newRowVal][newColVal])
            {
                pq.offer(new int[]{grid[newRowVal][newColVal],newRowVal,newColVal});
                visited[newRowVal][newColVal]=true;
            }
          }          
        }
        return maxElevation;
    }
}
//TC:O(N^2*log(N))
/*
Approach: At any time t elevation is t(water), so while we have to go from (0,0) to(n-1,n-1) we need to find minElelvation so that time taken would be less , so will traverse in all four directions from one cell, and will keep it in the PriorityQueue which is sorted in minimum value of grid[row][col] and then will process that min value of grid from queue once poll it and will check around 4 cell from this polled cell from queue! Once done will return maxElevation which is the time as well!
*/
