/*
Problem Description:
There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.
You are giving candies to these children subjected to the following requirements:
Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.

Example 2:
Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.
 
Constraints:
n == ratings.length
1 <= n <= 2 * 104
0 <= ratings[i] <= 2 * 104

*/
class Solution {
    public int candy(int[] ratings)
    {
        //Approach2: Only one extra space || TC:O(N)||SC:O(N)
        int n=ratings.length;
        int totalCandies=0;
        int[] count=new int[n];
        Arrays.fill(count,1);

        for(int i=1;i<n;i++)
        {
            if(ratings[i-1]< ratings[i])
            {
               count[i]=Math.max(count[i],count[i-1]+1);   
            }
        }
        for(int i=n-2;i>=0;i--)
        {
            if(ratings[i+1]< ratings[i])
            {
               count[i]=Math.max(count[i],count[i+1]+1);   
            }
        }
        for(int i=0;i<n;i++)
        {
            totalCandies+=count[i];
        }
        return totalCandies;
    }
}




        //Approach1: Two array,Space
      /*  int totalCandies=0;
        int n=ratings.length;
        int[] L2R=new int[n];
        int[] R2L=new int[n];
        Arrays.fill(L2R,1);
        Arrays.fill(R2L,1);

        for(int i=1;i<n;i++)
        {
            if(ratings[i-1]< ratings[i])
            {
               L2R[i]=Math.max(L2R[i],L2R[i-1]+1);   
            }
        }
        for(int i=n-2;i>=0;i--)
        {
            if(ratings[i+1]< ratings[i])
            {
               R2L[i]=Math.max(R2L[i],R2L[i+1]+1);   
            }
        }
        for(int i=0;i<n;i++)
        {
            totalCandies+=Math.max(L2R[i],R2L[i]);
        }
        return totalCandies;
    }
}*/
