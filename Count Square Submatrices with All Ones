/*
Problem Statement:
Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

Example 1:

Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.
Example 2:

Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.

Constraints:
1 <= arr.length <= 300
1 <= arr[0].length <= 300
0 <= arr[i][j] <= 1
 
class Solution {
    public int countSquares(int[][] matrix) 
    {
     //Approach 2: Bottom Up //TC:O(m*n) //SC:O(m*n)
      int m=matrix.length;
      int n=matrix[0].length;
      int[][] dp=new int[m][n];
      int result=0;
      for(int i=0;i<m;i++)
      {
        for(int j=0;j<n;j++)
        {
            //Base condition
            if(i==0 ||j==0)
            {
                dp[i][j]=matrix[i][j];
            }
            //Now will go from bottom to left,top and diagonal(just reverse in topdown)
            else if(matrix[i][j]==1)
            {
                 dp[i][j]=1+Math.min(dp[i][j-1],Math.min(dp[i-1][j],dp[i-1][j-1]));
            }  
            result+=dp[i][j];        
       }

      }

       return result;
    }
}
        //Approach1 : Recursion & Memorization TC:O(m*n)//SC:O(m*n)
        int m=matrix.length;
        int n=matrix[0].length;
        int[][] dp=new int[m+1][n+1];
        for(int i=0;i<=m;i++)
        {
            for(int j=0;j<=n;j++)
            {
                dp[i][j]=-1;
            }
        }
        int result=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(matrix[i][j]==1)
                {
                    result+=solve(i,j,matrix,dp);
                }              
            }
        }
        return result;
    }
    private int solve(int i,int j,int[][]matrix,int[][]dp)
    {
        //Base condition
         if(i>=matrix.length || j>=matrix[0].length)
         {
            return 0;
         }
         if(matrix[i][j]==0)
         {
            return 0;
         }
         if(dp[i][j]!=-1)
         {
            return dp[i][j];
         }
        int right=solve(i,j+1,matrix,dp);
        int below=solve(i+1,j,matrix,dp);
        int diagonal=solve(i+1,j+1,matrix,dp);

        return dp[i][j]=1+Math.min(right,Math.min(below,diagonal));
    }
} */
