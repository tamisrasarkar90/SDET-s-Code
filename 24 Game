/*
Problem Statement:
You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.
You are restricted with the following rules:
The division operator '/' represents real division, not integer division.
For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.
Every operation done is between two numbers. In particular, we cannot use '-' as a unary operator.
For example, if cards = [1, 1, 1, 1], the expression "-1 - 1 - 1 - 1" is not allowed.
You cannot concatenate numbers togetherFor example, if cards = [1, 2, 1, 2], the expression "12 + 12" is not valid.Return true if you can get such expression that evaluates to 24, and false otherwise.

Example 1:
Input: cards = [4,1,8,7]
Output: true
Explanation: (8-4) * (7-1) = 24

Example 2:
Input: cards = [1,2,1,2]
Output: false
 
Constraints:
cards.length == 4
1 <= cards[i] <= 9

*/
class Solution {
    private static double E=0.1;
    public boolean judgePoint24(int[] cards) 
    {
        //In order to create a Double list instead of int
        List<Double> list=new ArrayList();
        for(int num:cards)
        {
            list.add(1.0*num);
        }
      return solve(list);
    }
    private boolean solve(List<Double>cards)
    {
        //Base Condition
        if(cards.size()==1 )
        {
            return Math.abs(cards.get(0)-24.0)<=E;
        }
        for(int i=0;i<cards.size();i++)
        {
             for(int j=0;j<cards.size();j++)
             {
                if(i==j)
                {
                    continue;
                }
                List<Double>temp= new ArrayList();
                 for(int l=0;l<cards.size();l++)
                {
                    if(l!=i && l!=j)
                    {
                       temp.add(cards.get(l)); //We send everything apart from a,b combination to temp
                    }
                }
                double a=cards.get(i);
                double b=cards.get(j);
                List<Double>possiblePairs= new ArrayList();
                possiblePairs.add(a+b);
                possiblePairs.add(a-b);
                possiblePairs.add(a*b);
               // possiblePairs.add(b-a);
               /* if(Math.abs(a)>0)
                {
                      possiblePairs.add(b/a);
                }*/
                if(Math.abs(b)>0)
                {
                      possiblePairs.add(a/b);
                }
                //Now will add this possible pairs to temp
                for(double val:possiblePairs)
                {
                    temp.add(val); //Do
                    //Explore
                   if(solve(temp)==true)
                   {
                    return true;
                   }
                    //UNDO
                    temp.remove(val);
                }
             }
        }
        return false;
    }
}
//TC:O(4)~O(1 //SC:O(1)
