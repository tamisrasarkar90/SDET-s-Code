/*
Problem Statement::
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 
Constraints:
1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109
*/
//TC:O(N)
//SC:O(N)

class Solution {
    public List<Integer> majorityElement(int[] nums)
    {
        List<Integer> result=new ArrayList();
        
        Map<Integer,Integer> map=new HashMap();
        int len=nums.length;
        double count=(double) len/3;
        
        
        for(int i=0;i<nums.length;i++)
        {
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }
        
        for(int key:map.keySet())
        {
            if((double)map.get(key)>count)
            {
                result.add(key);
            }
        }
        
        return result;
    }
}
