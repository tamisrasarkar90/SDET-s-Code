/*
Problem Description:: 
Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.

Example 1
Input: points = [[1,1],[2,2],[3,3]]
Output: 3
Example 2:


Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4
 
Constraints:
1 <= points.length <= 300
points[i].length == 2
-104 <= xi, yi <= 104
All the points are unique.

*/
class Solution {
    public int maxPoints(int[][] points) 
    {
        int maxpoints=0;
        double slope=0;
//Staright line=y=mx+c [where y=y axis value, x= x axis value,c=constant,m=slope]
 /*Concept is for each point(taking as reference i.e.c) in the points array will check for map entry as key=slope value=no of points having same slope value. AT the end whch is max value will return that in addition to 1 in it(1 for the base reference point which is there over the st line. to calculate slope of two points in a striaght line=m=y2-y1/x2-x1)    
TC::O(n^2)
SC::O(n)
*/
      if(points.length<=0)
      {
          return 0;
      }  
      if(points.length<=2)
      {
          return points.length;
      }
      for(int point1[]:points)
      {
          //We have to check for each points taking reference
          Map<Double,Integer> map=new HashMap();
          for(int point2[]:points)
          {
     //If two points are same that mean they are on the same line,hence we don't need to increment points count but to skip that point.'        
             if(point1==point2)
             {
                  continue;
             }
     //if x2=x1 then that mean that is a vertical line hence slope=Infinite
             if(point1[0]==point2[0])
             {
                 slope=Double.POSITIVE_INFINITY;
             }
             else
             {
               slope= (point2[1]-point1[1])/(double)(point2[0]-point1[0]);
             }           
             
         map.put(slope,map.getOrDefault(slope,0)+1);
         if(map.get(slope)>maxpoints)
         {
            maxpoints=map.get(slope);
         }
      }
      }
       
        return maxpoints+1;
    }
}
