/*Problem Description::
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order. 
TIme complexity: O(n) and space(n) for hashmap
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

Constraints:
    2 <= nums.length <= 104
    -109 <= nums[i] <= 109
    -109 <= target <= 109
    Only one valid answer exists.
 */
class Solution {
    public int[] twoSum(int[] nums, int target) 
    {
        //Naive/BruteForce Approach
        for(int i=0;i<nums.length-1;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    return new int[]{i,j};
                }
            }
        }
        return null;
    }
} 

//HashMap

class Solution {
    public int[] twoSum(int[] nums, int target) 
    {
        Map<Integer,Integer> map=new HashMap<Integer,Integer>();        
        for(int i=0;i<nums.length;i++)
        {
             map.put(nums[i],i);
        }
        
        for(int j=0;j<nums.length;j++)
        {
           int compliment=target-nums[j]; 
            if(map.containsKey(compliment) && map.get(compliment)!=j)
            {
                return new int[]{j,map.get(compliment)};
            }
           
        }
        
      return null;  
    }
}
    

//HashMap Optimized

class Solution {
    public int[] twoSum(int[] nums, int target) 
    {
        Map<Integer,Integer> map=new HashMap<Integer,Integer>();        
        for(int i=0;i<nums.length;i++)
        {
            int compliment=target-nums[i];
            if(map.containsKey(compliment))
            {
                return new int[]{i,map.get(compliment)};
            }
            map.put(nums[i],i);
        }
      return null;  
    }
} 
