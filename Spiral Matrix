/* Problem Description:: Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

Constraints:
    m == matrix.length
    n == matrix[i].length
    1 <= m, n <= 10
    -100 <= matrix[i][j] <= 100
*/
//TC::O(N*M)+O(N+M)~ O(N^2)
//SC::O(1)
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) 
    {
        List<Integer>  result=new ArrayList();
        int m=matrix.length;
        int n=matrix[0].length;
        int total=m*n;
        int minrow=0;
        int mincol=0;
        int maxrow=m-1;
        int maxcol=n-1;
        int count=0;
        if(matrix.length==0||matrix==null)
        {
            return result;
        }
 
        while(count<total)
        {
        // for upper wall
          for(int j=mincol,i=minrow;j<=maxcol && count<total;j++)
          {
              result.add(matrix[i][j]);
              count++;
          }
       minrow++; 
        // for right wall
          for(int i=minrow,j=maxcol;i<=maxrow && count<total;i++)
          {
              result.add(matrix[i][j]);   
              count++;
          }
        maxcol--;
        // for bottom wall
         for(int i=maxrow,j=maxcol;j>=mincol && count<total;j--)
          {
              result.add(matrix[i][j]);
              count++;
          }
         maxrow--;
                   
        // for left wall
          for(int i=maxrow,j=mincol;i>=minrow && count<total;i--)
          {
              result.add(matrix[i][j]); 
              count++;
          }
         mincol++;       
        }            
            return result;
    }
}
