//Problem Description:::
/*Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.

A good subarray is a subarray where:

its length is at least two, and
the sum of the elements of the subarray is a multiple of k.
Note that:

A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.
 

Example 1:

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.
Example 2:

Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.
Example 3:

Input: nums = [23,2,6,4,7], k = 13
Output: false
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= sum(nums[i]) <= 231 - 1
1 <= k <= 231 - 1
*/
//TC:O(n)
//SC::O(k)
class Solution {
    public boolean checkSubarraySum(int[] nums, int k) 
    {
        Map<Integer,Integer> map=new HashMap(); //map will store reminder as key and index as value
//have to search for same reminder but in different index. why?
        //suppose, sum1%k==x & sum2%k==x, then sum1%k==sum2%k
//EX1:[23,2,4,6,7] K=6=> sum=23%6 ;map.put<5,0>
//sum=25 => map.put<1,1>
//sum=29 =>map.put<5,2> i.e since at index 0 we ge reminder as 5 and index 2 we get reminder as 5 that means nums[index1]+nums[index2]%k==0
      
        if(k==0)
        {
         boolean flag=false;
         for(int i=1;i<nums.length;i++)
        {
           if(nums[i]==0 && nums[i-1]==0)
           {
               flag=true;
           }
        } 
        return flag;
    }
        map.put(0,-1); //in case of null value array
        int sum=0;
        for(int i=0;i<nums.length;i++)
        {
            sum+=nums[i];
            if(map.containsKey(sum%k))
            {
                if(i-map.get(sum%k)>1) // we got the same reminder but in different index greater than the earlier
                {
                     return true;
                }
              
            }
            map.putIfAbsent(sum%k,i);
        }
        return false;
    }
}
