/*
Problem Description::
Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

Example 2:
Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 
Constraints:
1 <= nums.length <= 200
1 <= nums[i] <= 100
*/
class Solution {
    int[][] dp=new int[201][20001];
    public boolean canPartition(int[] nums) 
    {
        int n=nums.length;
        int totalSum=0;
        for(int[] row:dp)
        {
           Arrays.fill(row,-1);
        }
        for(int i=0;i<n;i++)
        {
            totalSum+=nums[i];
        }
        if(totalSum%2!=0)
        {
            return false;
        }
        int x= totalSum/2;
        return  solve(nums,0,x);
    }

    private  boolean solve(int[] nums, int i,int x)
    {
        if(x==0)
        {
            return true;
        }
        if(i>=nums.length)
        {
            return false;
        }
        if(dp[i][x]!=-1)
        {
            return dp[i][x]==1;
        }

        boolean take=false;

        if(x>=nums[i])
        {
            take=solve(nums,i+1,x-nums[i]);
        }
      boolean  notTake= solve(nums,i+1,x);
      dp[i][x]= (take||notTake) ? 1 :0;
      return take||notTake;
    }
}
//TC:O(N*M)
//SC:O(N*M)
