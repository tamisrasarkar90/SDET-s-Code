/*
Problem Statement::
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]

Constraints:
    1 <= candidates.length <= 100
    1 <= candidates[i] <= 50
    1 <= target <= 30

*/
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) 
    {
        Arrays.sort(candidates);
        List<List<Integer>> result=new ArrayList();
        int start=0;
        List<Integer> subList=new ArrayList();
        solve(candidates,start,subList,target,result);
        //result.add(subList);
        return result;

    }

    private void solve(int[] candidates, int start,List<Integer> subList,int target,List<List<Integer>> result)
    {
        if(target<0)
        {
            return ;
        }
        if(target==0)
        {
            result.add(new ArrayList<>(subList));
            return;
        }
       // start=0;
       for(int i=start;i<candidates.length;i++)
       {
        if(i>start && candidates[i-1]==candidates[i])
        {
            continue;
        }
         subList.add(candidates[i]);   //If take
         solve(candidates,i+1,subList,target-candidates[i],result);
         subList.remove(subList.size()-1);    //If not take
       
    }
}
  
}

//TC:O(N^2)
//SC:O(N)
