/* 
Problem Description::

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
Return true if you can reach the last index, or false otherwise.
Example 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.

Constraints:
    1 <= nums.length <= 104
    0 <= nums[i] <= 105
*/
//*****************************************Approach:: Greedy:: TC:O(N) and SC::O(1)*************************************************************************************
class Solution {
    public boolean canJump(int[] nums)
    {
        
        if(nums.length==0)
        {
            return false;
        } 
       int lastGoodIndexpos=nums.length-1;      
        for(int i=nums.length-1;i>=0;i--)
        {
            if(i+nums[i]>=lastGoodIndexpos)
            {
                lastGoodIndexpos=i;
            }
        }
        return lastGoodIndexpos==0;
    }
}

//TC:: O(N) and SC:O(1)
/* The intution behind the algorithm is,(Greedy) will start from end and make last index as good index then from there will move backwards,in order to find from the just back index can it be possible to jump the next one and so as till the last index.
At the end while i will recah at index=0 then return true or else false;

*/

