/*
Problem Description::
You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).

Return intervals after the insertion.

 

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
 

Constraints:

0 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 105
intervals is sorted by starti in ascending order.
newInterval.length == 2
0 <= start <= end <= 105
*/

//TC::O(N)
//SC::O(N)

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) 
    {
    /*
     Here there is three part to be consider in order to solve the problem.
     1. Before merging part. 2. After Merging part. 3. Merging/Overlapping part
    */
        List<int[]> list=new LinkedList();  //taking LinkedList as it is easy to add or delete    
        

        // 1st case, before Overlapping,checking if newinterval start is greater than currentinterval's end then no overlapping and directly currentinterval is getting added to list'
        int i=0;
        int len=intervals.length;
      //  will check each time i<len or not so that overbound not happen
        while(i<len && intervals[i][1]<newInterval[0])
        {
            list.add(intervals[i]);
            i++;
        }

    //2nd case, where Overlapping happens
    while(i<len && intervals[i][0]<=newInterval[1]) //means overlapping happens[e.g newinterval=[2,5],
    //currInterval=[3,8],then newIntervalend>=currInterval's start,hence merging happens']
     {
          newInterval[0]=Math.min(newInterval[0],intervals[i][0]);
          newInterval[1]=Math.max(newInterval[1],intervals[i][1]);       
          i++;
     }
     list.add(newInterval);

 // 3rd Case, after mergine happens then rest of the array
     while(i<len)
     {
         list.add(intervals[i]);
         i++;
     }

        int j=0;
        int[][] result=new int[list.size()][2];
        while(j<list.size())
        {
          result[j]=list.get(j);
          j++;
        }
        return result;
    }
}
