/*
Problem Description:
An array is considered special if every pair of its adjacent elements contains two numbers with different parity.

You are given an array of integers nums. Return true if nums is a special array, otherwise, return false.

 

Example 1:

Input: nums = [1]

Output: true

Explanation:

There is only one element. So the answer is true.

Example 2:

Input: nums = [2,1,4]

Output: true

Explanation:

There is only two pairs: (2,1) and (1,4), and both of them contain numbers with different parity. So the answer is true.

Example 3:

Input: nums = [4,3,1,6]

Output: false

Explanation:

nums[1] and nums[2] are both odd. So the answer is false.

 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100
*/
class Solution {
    public boolean isArraySpecial(int[] nums) 
    { 
        int n = nums.length;
        if (nums.length == 1) {
            return true;
        }
       // boolean flag = false;
        int i = 0;
        int j = i + 1;
        while (j < n) {
            if (nums[i] % 2 == 0 && nums[j] % 2 == 0 || nums[i] % 2 != 0 && nums[j] % 2 != 0)
            {
                return false;
            }

            i = j;
            j++;
        }
        return true;
    
    }
}

//TC:O(N)
//SC:O(1)

*/


/*
        Approach 2: Bit manipulations: Concept is: For odd number 0's bit is 1 and for even number 0'bit is 0
        and we get 0' bit and performing AND operation with the number with 1
        */
         int n=nums.length;
        if(nums.length==1)
        {
            return true;
        }
       
        int i=0;
        int j=i+1;
                while(j<n)
                {
                  if(((nums[i]&1)^(nums[j]&1))==0)  //as same bit if we XOR it,return 0
                  {
                    return false;
                  }
                  i=j;
                  j++;
               }
      return true;
    }
}
