/*
Problem Description:
You are given two positive integers n and limit.

Return the total number of ways to distribute n candies among 3 children such that no child gets more than limit candies.


Example 1:

Input: n = 5, limit = 2
Output: 3
Explanation: There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1).
Example 2:

Input: n = 3, limit = 3
Output: 10
Explanation: There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).
 

Constraints:

1 <= n <= 106
1 <= limit <= 106
*/
class Solution {
    public long distributeCandies(int n, int limit) 
    {
        long ways=0;
        int maxCh1=Math.min(n,limit);
        int minCh1=Math.max(0,n-2*limit);

        for(int i=minCh1;i<=maxCh1;i++)
        {
        //The above loop is for Child1 fixing it, now we have to assumen we have 2 childs and n-i totals candies  to distribute
        int N=n-i;
        //For second child
        int minCh2= Math.max(0,N-limit);         //means give max to the 3rd child
        int maxCh2=Math.min(N,limit);

        //No of ways= high-low+1
        ways+=maxCh2-minCh2+1;
        }
       return ways; 

    }
}
//TC:O(N)
//SC:O(1)
