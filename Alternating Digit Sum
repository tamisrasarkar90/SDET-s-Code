/*
Problem Description::
You are given a positive integer n. Each digit of n has a sign according to the following rules:

The most significant digit is assigned a positive sign.
Each other digit has an opposite sign to its adjacent digits.
Return the sum of all digits with their corresponding sign.

Example 1:
Input: n = 521
Output: 4
Explanation: (+5) + (-2) + (+1) = 4.
Example 2:

Input: n = 111
Output: 1
Explanation: (+1) + (-1) + (+1) = 1.
Example 3:

Input: n = 886996
Output: 0
Explanation: (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0.
 
Constraints:

1 <= n <= 109
*/
class Solution {
    public int alternateDigitSum(int n) 
    {
        Stack<Integer> stack=new Stack<Integer>();
        List<Integer> list=new ArrayList();
        int sum=0;
        while(n>0)
        {
            int d=n%10;
            stack.push(d);
            n=n/10;
        }
        
        while(!stack.isEmpty())
        {
           list.add(stack.pop());          
        }
        for(int i=1;i<list.size();i+2)  //i==1 coz i=0 always should positive and not in consideration logic,i==2 as for each alternate int set negative
        {
            list.set(i,-list.get(i));  //this will change the earlier value with the new one as negative
        }
        for(int i=0;i<list.size();i++)
        {
            sum+=list.get(i);
        }
        return sum;
    }
}
//TC::O(N)
//SC::O(2N) ~O(N)
