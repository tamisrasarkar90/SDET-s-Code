/*
Problem Statement::
A happy string is a string that:
consists only of letters of the set ['a', 'b', 'c'].
s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).
For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.
Return the kth string of this list or return an empty string if there are less than k happy strings of length n.

Example 1:
Input: n = 1, k = 3
Output: "c"
Explanation: The list ["a", "b", "c"] contains all happy strings of length 1. The third string is "c".

Example 2:
Input: n = 1, k = 4
Output: ""
Explanation: There are only 3 happy strings of length 1.

Example 3:
Input: n = 3, k = 9
Output: "cab"
Explanation: There are 12 different happy string of length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab", "cac", "cba", "cbc"]. You will find the 9th string = "cab" 

Constraints:
1 <= n <= 10
1 <= k <= 100
*/
class Solution {
    public String getHappyString(int n, int k) 
    {
        StringBuilder currString=new StringBuilder() ;
        List<String> result=new ArrayList();
        solve(currString,result,n);
        if(result.size()<k)
        {
            return "";
        }
        return result.get(k-1);
    }
    private static void solve(StringBuilder currString,List<String> result,int n)
    {
        //Base Condition
        if(currString.length()==n)
        {
            result.add(currString.toString());
            return;
        }
       
    for(char ch='a';ch<='c';ch++)
    {
         if(currString.length()>0 && currString.charAt(currString.length()-1)==ch) //same char as prev
        {
                 continue;
        }
         currString.append(ch);   //Do  
         solve(currString,result,n);//Explore
         currString.deleteCharAt(currString.length()-1); //UNDO
      }
    }
}
//TC:O(n*2^n)
//SC:O(N)
