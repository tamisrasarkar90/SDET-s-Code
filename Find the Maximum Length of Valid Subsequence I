/*
Problem Statement:
You are given an integer array nums.A subsequence sub of nums with length x is called valid if it satisfies:
(sub[0] + sub[1]) % 2 == (sub[1] + sub[2]) % 2 == ... == (sub[x - 2] + sub[x - 1]) % 2.
Return the length of the longest valid subsequence of nums.
A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: nums = [1,2,3,4]
Output: 4
Explanation:
The longest valid subsequence is [1, 2, 3, 4].

Example 2:
Input: nums = [1,2,1,1,2,1,2]
Output: 6
Explanation:
The longest valid subsequence is [1, 2, 1, 2, 1, 2].

Example 3:
Input: nums = [1,3]
Output: 2
Explanation:
The longest valid subsequence is [1, 3].

Constraints:
2 <= nums.length <= 2 * 105
1 <= nums[i] <= 107

*/
class Solution {
    public int maximumLength(int[] nums) 
    {
        int n=nums.length;
        int evenCount=0;
        int oddCount=0;
        int evenoddCount=1;


     //Even & ODD number subsequence         
        for(int i=0;i<n;i++)
        {
            if(nums[i]%2==0)
            {
               evenCount++;
            }
            else
            {
               oddCount++;
            }
        }
        //Alternate Even Odd count
            for(int i=1;i<n;i++)
            {
             if((nums[i-1]%2==0 && nums[i]%2==1)||(nums[i-1]%2==1 && nums[i]%2==0))
             {
                evenoddCount++;
             }
             else
             {
                continue;
             }
        }
       return Math.max(evenoddCount,Math.max(evenCount,oddCount));
    }
}
/*
Thought Process: 1)Take all even number's subsequence 2)1)Take all odd number's subsequence 3)1)Take all alternate even/odd number's subsequence 4. Return the max length as answer
*/

//TC:O(N) where N=no of element
//SC:O(1)
