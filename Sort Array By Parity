Problem Description::
Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.
Return any array that satisfies this condition.

Example 1:
Input: nums = [3,1,2,4]
Output: [2,4,3,1]
Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.

Example 2:
Input: nums = [0]
Output: [0]

Constraints:
    1 <= nums.length <= 5000
    0 <= nums[i] <= 5000
******************************************************************************Approach::Time Complexity:O(n) and Space complexity:O(n*m)*********************************
class Solution {
    public int[] sortArrayByParity(int[] nums) 
    {
        List<Integer> list=new ArrayList<Integer>();
        int[] result=new int[nums.length];
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]%2==0)
            {
                list.add(nums[i]);
                //result[i]=nums[i];
            }
        }
        for(int j=0;j<nums.length;j++)
        {
           if(nums[j]%2!=0)
            {
                list.add(nums[j]);
               //result[j]=nums[j];
            }
        }
        
    for(int k=0;k<list.size();k++)
    {
       result[k]= list.get(k);
    }
        return result;
    }
}
//***************************Approach::2:: Using Two pointers: TC(O(n)) & SC(O(n))************************************************** /


class Solution {
    public int[] sortArrayByParity(int[] nums) 
    {
        int[] result =new int[nums.length];
        int start=0;
        int end=result.length-1;
        
        for(int e: nums)
        {
            if(e%2==0)
            {
                result[start]=e;
                start++;
            }
            else
            {
                result[end]=e;
                end--;
            }
        }
        return result;
        
    }
}
