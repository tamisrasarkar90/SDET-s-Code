Problem Description::
Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] 

Constraints:
    1 <= nums.length <= 8
    -10 <= nums[i] <= 10
********************************************************************Approach::BackTracking***************************************************************************************
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) 
    {
        List<List<Integer>> result=new ArrayList();
        Set<List<Integer>> answer=new HashSet();
        
        boolean[] visited=new boolean[nums.length];
        
        backtrack(nums,visited,answer,new ArrayList<>());
        for(List<Integer> c: answer)
        {
            result.add(c);
        }
        
        return result;
    }
    
    public static void backtrack(int[] nums,boolean[] visited,Set<List<Integer>> answer,List<Integer>curr)
    {
        if(curr.size()==nums.length)
        {
            answer.add(new ArrayList(curr));
        }
        
            for(int i=0;i<nums.length;i++)
            {
                if(!visited[i])
                {
                    curr.add(nums[i]);
                    visited[i]=true;
                    backtrack(nums,visited,answer,curr);
                    visited[i]=false;
                    curr.remove(curr.size()-1);
                    
                }
            }
         
        
    }
}
