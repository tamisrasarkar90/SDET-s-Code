//* Problem Description::
A sequence x1, x2, ..., xn is Fibonacci-like if:

n >= 3
xi + xi+1 == xi+2 for all i + 2 <= n
Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.
A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].

Example 1:
Input: arr = [1,2,3,4,5,6,7,8]
Output: 5
Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].

Example 2:
Input: arr = [1,3,7,11,12,14,18]
Output: 3
Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].

Constraints:
3 <= arr.length <= 1000
1 <= arr[i] < arr[i + 1] <= 109

*/
class Solution {
    
    int maxLen=0;
    public int lenLongestFibSubseq(int[] arr) 
    {
        int n=arr.length;
        Map<Integer,Integer> map=new HashMap();
        for(int i=0;i<n;i++)
        {
            map.put(arr[i],i);
        }
         for(int j=1;j<n;j++)
           {
             for(int k=j+1;k<n;k++) //Ensure k>j
             {
                int len=solve(j,k,arr,map);
                if(len>=3) //To qualify for fibbonacci atleast 3 elements should be there!
                {
                    maxLen=Math.max(maxLen,len);
                }
             }
        }
        return maxLen;
    }

    private static int solve(int j, int k,int[] arr,Map<Integer,Integer> map)
    {       
               int target=arr[k]-arr[j];

                if(map.containsKey(target) && map.get(target)<j) //then we found i, another sequence of same fib series
                {
                   int i= map.get(target);
                  return solve(i,j,arr,map)+1; //This 1 is for k part which already secure it's position to the len
                }
                //else if i<0 or out of bound, in that case solve function will return 2 as i & j are contributing it's length to the maxLen
               return 2; //solve=>2,k & j as i out of bound
                    

    }      
}

//TC:O(N^3)
//SC:O(N)
        
