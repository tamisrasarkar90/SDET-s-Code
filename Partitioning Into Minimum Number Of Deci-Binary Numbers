/*Problem Statement:: 
A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example, 101 and 1100 are deci-binary, while 112 and 3001 are not.
Given a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.
Example 1:
Input: n = "32"
Output: 3
Explanation: 10 + 11 + 11 = 32

Example 2:
Input: n = "82734"
Output: 8

Example 3:
Input: n = "27346209830709182346"
Output: 9

Constraints:
    1 <= n.length <= 105
    n consists of only digits.
    n does not contain any leading zeros and represents a positive integer.
*/
***************************************************************Approach:: TC::O(n) and SC::O(1)*******************************************************************************
class Solution {
    public int minPartitions(String n)
    {
        int ans=0;
        for(char c: n.toCharArray())
        {
            ans= Math.max(ans,c-'0');
        }
        
        return ans;
    }
}


/* Logic is:: Suppose the number is 32, then largest deci binary no of two digit is 11;Hence
 1)32
 2)32-11=21 Again 21 is two digit and largest deci binary of 2 digit is 11;hence
 3)21-11=10 Again 10 is two digit and largest deci binary of 2 digit is 11;hence
 4)10 which is a deci binary.
  so total count =3 which in turn the largestchar within the string
 
*/
