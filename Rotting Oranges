/* Multi Source BFS
Problem Statement:
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Example 1:
Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:
Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:
Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.

*/

class Solution {
    public int orangesRotting(int[][] grid)
    {
       int mins=0;
       int m=grid.length;
       int n=grid[0].length;
       int oneCount=0;
       Queue<int[]> que=new LinkedList();
       int[][] direction={{-1,0},{1,0},{0,-1},{0,1}}; // to traverse in different directions.

       for(int i=0;i<m;i++)
       {
           for(int j=0;j<n;j++)
           {
              if(grid[i][j]==2)
              {
                que.offer(new int[]{i,j}); //First insert rotten Oranges
              }
              if(grid[i][j]==1)       //Count how many fresh Oranges are there
              {
                oneCount+=1;
              }

           }
       }
       if(oneCount==0) // If there is no fresh ornage return 0 before proceeding to Queue
       {
         return 0;
       }
       while(!que.isEmpty())
       {
          int N=que.size();  //Normal BFS template
          while(N-->0) //Untill queue's level complete
          {
             int[] arr=que.poll();     // poll the elements
             int i=arr[0];
             int j=arr[1];
             for(int[] dir:direction)        // check for 4 directions of current polling coordinates
             {
                int _i=i+dir[0];        // increase/decrease row value
                int _j=j+dir[1];      // increase/decrease col value
                if(_i>=0 && _i<m && _j>=0 && _j<n && grid[_i][_j]==1)       //if there is fresh oranges within boundary
                {
                    grid[_i][_j]=2;       //make it rotten
                    que.offer(new int[]{_i,_j}); //add it to the queue for next level
                    oneCount--;      //freshCount decrease
                }
             }
          }
          mins+=1;     //While all rotten oranges on a level has been processed, increase time
       }
       return  oneCount==0 ? mins-1 : -1;         
    }
}
//T.C : O(m * n) , We will visit all cells once
//S.C : O(m * n), in worst case queue will contain all the cells
