/*
Problem Statement:
You have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k.

Divide the marbles into the k bags according to the following rules:

No bag is empty.
If the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag.
If a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j].
The score after distributing the marbles is the sum of the costs of all the k bags.
Return the difference between the maximum and minimum scores among marble distributions.

Example 1:
Input: weights = [1,3,5,1], k = 2
Output: 4
Explanation: 
The distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6. 
The distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10. 
Thus, we return their difference 10 - 6 = 4.

Example 2:
Input: weights = [1, 3], k = 2
Output: 0
Explanation: The only distribution possible is [1],[3]. 
Since both the maximal and minimal score are the same, we return 0.
 
Constraints:
1 <= k <= weights.length <= 105
1 <= weights[i] <= 109

*/
class Solution {
    public long putMarbles(int[] weights, int k) 
    {
        /* Whatever partition we do, it will end up removing the first and last element from the array, so what basically we have to   focus is, in between pairs.So from the problem statement we can derived the below Alogo:
        Step 1: First take a pairSum array of n-1 size(Considering n the length of teh given Array)
        Step 2: Now Sort the pairSum Array
        Step 3. Take (k-1) pairs from pairSum Arrays.As it is sorted hence to find out min and max, min should be considered from left side of pairSum array and max from right Side of PairSum Array.
        Step 4: Now return the difference of max and min value of pairSum Array
*/
      int n=weights.length;
      int m=n-1;
      int[] pairSum=new int[m];
      for(int i=0;i<n-1;i++)
      {
        pairSum[i]=weights[i]+weights[i+1];
      }
      Arrays.sort(pairSum);
      //Now iterate through the Array to get min and max value
      long minSum=0;
      long maxSum=0;
      for(int j=0;j<(k-1);j++)
      {
        minSum+=pairSum[j]; //From starting position
        maxSum+=pairSum[(m-1)-j]; //From Ending Position as the array is Sorted
      }
     return  maxSum-minSum;

    }
}
//TC:O(NlogN)
//SC:O(N)
