/*
Problem Statement:
You are given an integer array nums of length n and a 2D array queries, where queries[i] = [li, ri].

For each queries[i]:

Select a subset of indices within the range [li, ri] in nums.
Decrement the values at the selected indices by 1.
A Zero Array is an array where all elements are equal to 0.

Return true if it is possible to transform nums into a Zero Array after processing all the queries sequentially, otherwise return false.

 

Example 1:

Input: nums = [1,0,1], queries = [[0,2]]

Output: true

Explanation:

For i = 0:
Select the subset of indices as [0, 2] and decrement the values at these indices by 1.
The array will become [0, 0, 0], which is a Zero Array.
Example 2:

Input: nums = [4,3,2,1], queries = [[1,3],[0,2]]

Output: false

Explanation:

For i = 0:
Select the subset of indices as [1, 2, 3] and decrement the values at these indices by 1.
The array will become [4, 2, 1, 0].
For i = 1:
Select the subset of indices as [0, 1, 2] and decrement the values at these indices by 1.
The array will become [3, 1, 0, 0], which is not a Zero Array.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105
1 <= queries.length <= 105
queries[i].length == 2
0 <= li <= ri < nums.length

*/
/*class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) 
    {
        //Approach 1: Brute Force: TLE
        
        for(int i=0;i<queries.length;i++)
        {
            int f=queries[i][0];
            int s=queries[i][1];
            for(int j=f;j<=s;j++)
            {
                if(nums[j]>0)
                {
                   nums[j]=nums[j]-1;
                }              
            } 
        }      
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]!=0)
            {
                return false;
            }
        }
      return true;
    }
}*/
//TC:O(N*N)
//Approach 2: Difference Array technique, remember for wach queations contains range sum we can do following processes. 1. Difference Array tecqniques, 2. Segement tree(incase we need to update the i/p array)
/* What is Difference Array technique, helpful for range based question to update values,proocess:
1) First add the value in lower range and subtract the value from higherrange+1
i.e nums[l]=+x and nums[r+1]=-x
2) Now take the cumulative sum for each index, which is eventually giving the value/modified array after performing this range based queries

*/
class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) 
    {
        int[] diffArr=new int[nums.length];
        //Difference Array techinques Step 1: update low and high+1 accordingly
        for(int i=0;i<queries.length;i++)
        {
            int f=queries[i][0];
            int s=queries[i][1];
            diffArr[f]++;
            if(s+1<nums.length)
            {
                diffArr[s+1]--;
            }
        }
        
        //Step 2: Now take the culumative sum for each index
        //newarr[0]=nums[0];
        int cumSum=0;
    for(int i=0;i<diffArr.length;i++)
    {
        cumSum+=diffArr[i];           
        if(cumSum<nums[i])  //only if cumSum is greater or equals to nums[i] then return true
            {
                return false;
            }
        }
      return true;
    }
}
    //TC:O(N)
//SC:O(N)
