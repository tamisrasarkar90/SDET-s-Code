/*
Problem Description::
You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

Example 1:
Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
 
Constraints:
1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0's.

*/
class Solution {  
    public int[] plusOne(int[] digits)
    {
        //int[] result=new int[digits.length];
        int len=digits.length;
        
        for(int i=len-1;i>=0;i--)
        {
           if(digits[i]<9)
           {
                digits[i]++;
                return  digits;
           }
           else
           {
              digits[i]=0;
           }
         }      
   
     int[] result=new int[len+1];
     result[0]=1;

    return result;
    
}
          
}  

/*
Approach:: if the digit is <9 then we simple add one to it,and return  but it is ==9 then make it 0,example:: 1299=> 1300, 439=> 440
 But for 99, 999, 99999,999999 in this case  it will simply make all 9 to zero but will not return anything.
 In that case we need to add 1 and make all 9 position as 0 and then return that.
 That is why created another array with one extra space and then add 1 in front of the array and return
TC::O(N)
SC::O(N)
*/
