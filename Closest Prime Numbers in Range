/*
Problem Statement::
Given two positive integers left and right, find the two integers num1 and num2 such that:
left <= num1 < num2 <= right .
Both num1 and num2 are prime numbers.
num2 - num1 is the minimum amongst all other pairs satisfying the above conditions.
Return the positive integer array ans = [num1, num2]. If there are multiple pairs satisfying these conditions, return the one with the smallest num1 value. If no such numbers exist, return [-1, -1].

Example 1:
Input: left = 10, right = 19
Output: [11,13]
Explanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.
The closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].
Since 11 is smaller than 17, we return the first pair.

Example 2:
Input: left = 4, right = 6
Output: [-1,-1]
Explanation: There exists only one prime number in the given range, so the conditions cannot be satisfied.
 
Constraints:
1 <= left <= right <= 106
 
*/
class Solution {
    public int[] closestPrimes(int left, int right)
    {
        List<Integer> primeList=new ArrayList();
        int[] result=new int[2];
        for(int i=left;i<=right;i++)
        {
            if(isPrime(i))
            {
               primeList.add(i);
            }
        }
        if(primeList.size()>=2)
        {
          int diff=1000000;
          for(int i=1;i<primeList.size();i++)
          {
            int d=primeList.get(i)-primeList.get(i-1);
            if(diff>d)
            {
                diff=d;
                result[0]=primeList.get(i-1);
                result[1]=primeList.get(i);
            }
            
          }

    }
        else
        {
            result[0]=-1;
            result[1]=-1;
        }
       return result; 
    }
    private static boolean isPrime(int n)
    {
            if(n<=1)
            {
                return false;
            }
       
        for(int i=2;i<=(int) Math.sqrt(n);i++)
        {          
            if(n%i==0)
            {
              return false;
            }
        }
       return true;
    }
}
//TC:O(N)
//SC:O(N)
