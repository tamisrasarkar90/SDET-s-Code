/*
Problem Statement:
You are given an integer array nums and an integer k.

An integer h is called valid if all values in the array that are strictly greater than h are identical.

For example, if nums = [10, 8, 10, 8], a valid integer is h = 9 because all nums[i] > 9 are equal to 10, but 5 is not a valid integer.

You are allowed to perform the following operation on nums:

Select an integer h that is valid for the current values in nums.
For each index i where nums[i] > h, set nums[i] to h.
Return the minimum number of operations required to make every element in nums equal to k. If it is impossible to make all elements equal to k, return -1.


Example 1:
Input: nums = [5,2,5,4,5], k = 2
Output: 2
Explanation:
The operations can be performed in order using valid integers 4 and then 2.

Example 2:
Input: nums = [2,1,2], k = 2
Output: -1
Explanation:
It is impossible to make all the values equal to 2.

Example 3:
Input: nums = [9,7,5,3], k = 1
Output: 4
Explanation:
The operations can be performed using valid integers in the order 7, 5, 3, and 1.
 

Constraints:

1 <= nums.length <= 100 
1 <= nums[i] <= 100
1 <= k <= 100
*/
class Solution {
    public int minOperations(int[] nums, int k) 
    {
       
       List<Integer> list=new ArrayList();
        for(int num:nums)
        {
            list.add(num);
        }

        int n=list.size();
        Collections.sort(list);
        int i=n-2;
        int minOp=0;
        while(i>=0)
        {
            if(list.get(i)==list.get(i+1))
            {
                i--;
            }
            else
            {
                int changeNum=list.get(i);
                int count=n-(i+1);
                int j=i+1;
                while(count>0)
                {
                    list.remove(j);
                    list.add(changeNum);
                    count--;
                    j++;
                    Collections.sort(list);
                }
                minOp+=1;
                i--;
            }
        }
        for(int num:list)
        {
            if(num==k)
            {
                return minOp;
            }
            else if(num>k)
            {
                return minOp+1;
            }
        }

        return -1;
    }
}
//TC:O(N^2+NLogN)
//SC:O(N)

//Approach 2: TC:O(N)

 Set<Integer> set=new HashSet();
int minOp=0;
for(int i=0;i<nums.length;i++)
{
    if(nums[i]<k)
    {
        return -1;
    }
    else if(nums[i]>k)
    {
        set.add(nums[i]);
    }
}
    return set.size();
 }
    }      
        
