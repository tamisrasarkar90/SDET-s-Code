Problem Description:: Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].
Return true if there is a 132 pattern in nums, otherwise, return false.
Example 1:
Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.

Example 2:
Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].

Example 3:
Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].

Constraints:
    n == nums.length
    1 <= n <= 2 * 105
    -109 <= nums[i] <= 109
*********************************************Approach:: TC::O(n) and SC:O(n)*****************************************************************************
/* Approach is,to find peek(as largest element in the stack,and second largest in the right side of the peak and min in the left side of the peek) so for that will consider
a second largest element initiate at integer.minvalue and in stack will push element from the array,if element is less than stack's peek,will push that,if element is greater than
stack's peek then will pop stack's existing element and update second largest element acoordingly. and push the max one within stack.If this is teh case,then second largest
element will hold second largest value within te array stack will hold peak element and if we find any current value is less than second largest element will rteurn true as we find 132 pattern
Else return false. remember to traverse the array from the right to left
*/
 //TC::O(n) and SC:O(n)

class Solution { 
public boolean find132pattern(int[] nums) 
    {
     int secondmax= Integer.MIN_VALUE; 
     Stack<Integer> stack= new Stack<Integer>();
      for(int i=nums.length-1;i>=0;i--)
      {
        if(nums[i]<secondmax)
        {
            return true;
        }
        while(!stack.isEmpty() && stack.peek()<nums[i])
        {
            secondmax=Math.max(secondmax,stack.pop());
        }
          stack.push(nums[i]);
      }
        /*for (int i = 0; i < nums.length - 2; i++) {
            for (int j = i + 1; j < nums.length - 1; j++) {
                for (int k = j + 1; k < nums.length; k++) {
                    if (nums[k] > nums[i] && nums[j] > nums[k])
                        return true;
                }
            }
        }*/
        return false;
    }
}

