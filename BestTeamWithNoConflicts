/*
Problem Description:: You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.
However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.
Given two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.
Example 1:
Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]
Output: 34
Explanation: You can choose all the players.

Example 2:
Input: scores = [4,5,6,5], ages = [2,1,2,1]
Output: 16
Explanation: It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.

Example 3:
Input: scores = [1,2,3,5], ages = [8,9,10,1]
Output: 6
Explanation: It is best to choose the first 3 players. 

Constraints:
1 <= scores.length, ages.length <= 1000
scores.length == ages.length
1 <= scores[i] <= 106
1 <= ages[i] <= 1000
*/

    class Solution {
    public int bestTeamScore(int[] scores, int[] ages) 
    {
        int n=scores.length;
        n= ages.length; // as length of two are equals.
        int[][] whole=new int[n][2]; //now creating 2d array so that mapping is easy between two arrays
        for(int i=0;i<n;i++)
        {
            whole[i][0]=ages[i];
            whole[i][1]=scores[i];
        }
      //Sort the array in the basis of age in order to check only one part(score) as other one(age) is alreday sorted
       Arrays.sort(whole,(a,b)-> a[0]==b[0] ? a[1]-b[1] : a[0]-b[0]); //if age is equals then sort in the basis of score else sort basis of age

       return findteam(whole);

    }

   private  int findteam(int[][]whole)
   {
       int n= whole.length;
       int[] dp=new int[n];
       int answer=0;
       // For the first time individuals score is best his/her score
       for(int i=0;i<n;i++)
       {
           dp[i]=Math.max(whole[i][1],answer);
       }
       /*Now the logic of LIS came into pic .We consider random one index in the whole array and j is prev index of which we selected randomly to 0(Means starting from i as random index,the iimediate prev to zero where all ages are less than i's index age ,then if we found value which score is less than i th score,they can form team'). Now as the array is sorted in the age basis ,so prev's age(upto zero) is less so if prev's score is less than this current random ,then will consider to group together. 
At the last will check with answer's holding which score is higest in max,return that.' */

       for(int i=0;i<n;i++)
       {
           for(int j=i-1;j>=0;j--) //starting from j to 0 which scores are less than ith they can form team as agewise they all are younger than i 
           {
               if(whole[i][1]>=whole[j][1]) //they can form team
               {
                   dp[i]=Math.max(dp[i],whole[i][1]+dp[j]);
               }
           }
           answer=Math.max(dp[i],answer);

       }
       return answer;
   }
}
//TC::O(N^2)
//SC::O(N)

