/*
Problem Statement::
You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.
A substring is a contiguous sequence of characters within a string.

Example 1:
Input: num = "52"
Output: "5"
Explanation: The only non-empty substrings are "5", "2", and "52". "5" is the only odd number.

Example 2:
Input: num = "4206"
Output: ""
Explanation: There are no odd numbers in "4206".

Example 3:
Input: num = "35427"
Output: "35427"
Explanation: "35427" is already an odd number.

Constraints:
1 <= num.length <= 105
num only consists of digits and does not contain any leading zeros.
*/

class Solution {
    public String largestOddNumber(String num) 
    {
      // The catch is if one goes from end of the string, if it is odd digit then the whole substring till 0 index should be odd and that's the most largest substring.'
        String str=null ;
        for(int i=num.length()-1;i>=0;i--)
        {
            if(Character.getNumericValue(num.charAt(i))%2!=0)
            {
               return num.substring(0,i+1);
            }
        }
       return "";
    }
}
//TC:O(N)
//SC:O(1)
       /* if(Integer.parseInt(num)%2!=0)
        {
            return num ;
        }
       //StringBuilder maxoOdd=new StringBuilder();
       //int max =Integer.parseInt(num.charAt(0))
       int max=0;

       for(int i=0;i<num.length();i++)
       {
           if(Integer.parseInt(num.charAt(i))%2!=0 )
           {
               max= Integer.parseInt(num.charAt(i));
           }
           if(Integer.parseInt(num.charAt(i))>max)
           {
               max= Integer.parseInt(num.charAt(i));
           }
           /*if(maxOdd.size()!=0 && Integer.parseInt(num.charAt(i))%2!=0)
           {
                if(maxOdd.)
           }
            if(Integer.parseInt(num.charAt(i))%2!=0)
            {
                maxOdd.append(num.charAt(i));
            }
       }
      return  String.valueOf(max);
    }
}*/
