/* Problem Statement:: Given an integer array nums, return the length of the longest strictly increasing subsequence.
A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1

Constraints:
    1 <= nums.length <= 2500
    -104 <= nums[i] <= 104
//TC::O(NlogN) 
//SC::O(N)
*/

class Solution {
    public int lengthOfLIS(int[] nums)
    {
      if(nums.length==0)
      {
          return 0;
      }
      List<Integer> list=new ArrayList();
      list.add(nums[0]) ;
//1.first we will add first element from nums into the list consering this as a part of increasing subsequence.
      
      for(int i=1;i<nums.length;i++) //2.From second element try to compare and add into list
      {
          if(nums[i]>list.get(list.size()-1)) 
        /*3.checking that the element from nums array is largest from all the elements present in list so far.Then only can insert.As longest increasing subsequence list.*/
          {
              list.add(nums[i]);
          }
          else
          {
              int start=binarySearch(list,nums[i]); 
              
/*4. Else if the num from nums array is smaller than any of nums present in list,then need to find that num from list and replace with current num from num array. For that as our list is sorted hence will do a binary search to optimize and get the index where I will put the current num from nums array hence start represent the index and num as value.*/
              list.set(start,nums[i]);
          }
      }
        return list.size();
    }
    
private static int binarySearch(List<Integer>list,int target)
{
    int start=0;
    int end=list.size()-1;
    while(start<end)
    {
        int mid=(start+end)/2;  //as there is no chance of overflow coz list length and int is within managable range.
        if(list.get(mid)==target)
        {
            return mid;
        }
        else if(list.get(mid)<target)
        {
            start=mid+1;
        }
        else
        {
            end=mid;
        }
    }
    return start;
}
}
