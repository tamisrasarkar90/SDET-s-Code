/*
Problem Statement::
Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.

Example 1:
Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6

Example 2:
Input: arr = [1,1]
Output: 1

Constraints:
1 <= arr.length <= 104
0 <= arr[i] <= 105

*/

class Solution {
    public int findSpecialInteger(int[] arr) 
    {
     /* //Approach 2
      int i=0;
      int j=i;
      int max_count=0;
      int result=0;
      while(j<arr.length && i<j)
      {
          if(arr[j]!=arr[i])
          {
              int count=j-i;
              if(max_count<count)
              {
                  max_count=count;
                  result=arr[j-1];
              }
              i=j;
              j++;
          }
          j++;
      }
      return result;
    }
}*/







        //Approach1
        Map<Integer, Integer> map=new HashMap();
        
        for(int i=0;i<arr.length;i++)
        {
            map.put(arr[i],map.getOrDefault(arr[i],0)+1);
        }
        int max=0;
        int res=0;
        for(int key:map.keySet())
        {
             if(map.get(key)>max)
             {
                 max=map.get(key);
                 res=key;
             }
        }
        return res;
    }
}
