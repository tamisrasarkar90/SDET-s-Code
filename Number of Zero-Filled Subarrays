/*
Problem Description:
Given an integer array nums, return the number of subarrays filled with 0.A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:
Input: nums = [1,3,0,0,2,0,0,4]
Output: 6
Explanation: 
There are 4 occurrences of [0] as a subarray.
There are 2 occurrences of [0,0] as a subarray.
There is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.

Example 2:
Input: nums = [0,0,0,2,0,0]
Output: 9
Explanation:
There are 5 occurrences of [0] as a subarray.
There are 3 occurrences of [0,0] as a subarray.
There is 1 occurrence of [0,0,0] as a subarray.
There is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9.

Example 3:
Input: nums = [2,10,2019]
Output: 0
Explanation: There is no subarray filled with 0. Therefore, we return 0.
 
Constraints:
1 <= nums.length <= 105
-109 <= nums[i] <= 109
*/
class Solution {
    public long zeroFilledSubarray(int[] nums) 
    {
        //Approach 2: TC:O(N)/SC:O(N) If we get contiguous array we are increasing our count variable and appending it into answer,but when continuity break we are make count as 0,eg, for 0=>subarray val=0;
       // for (0,0)=> 3 for (0,0,0)=>6
        long val=0;
        int n=nums.length;
        int count=0;

       for(int i=0;i<n;i++)
       {
          if(nums[i]==0)
          {
            count++;
            val+=count;
          }
          else
          {
            count=0;
          }
       }
      return val;
    }
}

        
        //Apparoach1: Total subarray=> n*(n+1)/2 where n=length of nums |TC:O(N),SC:O(N)
        long val=0;
        int n=nums.length;
        int i=0;
        while(i<n)
        {
            long len=0;
            if(nums[i]==0)
            {
                while(i<n && nums[i]==0)
                {
                    len++;
                    i++;
                }
            }
            else
            {
                i++;
            }
            val+=len*(len+1)/2;
        }
       return val; 
    }
}
